{"version":3,"sources":["functions.js","randomMessage.js","thenBy.min.js","Stats.js","Calendar.js","CatGif.js","randomName.js","CustomModal.js","Shop.js","AddTask.js","Priority.js","List.js","Settings.js","TaskText.js","TaskDetails.js","TaskButtons.js","TaskEditBox.js","Tags.js","Task.js","ToDo.js","App.js","serviceWorker.js","index.js"],"names":["convertDate","date","convertTo","ISODate","Date","toISOString","substring","getTime","year","month","day","setUTCFullYear","setUTCMonth","setUTCDate","toLocaleDateString","getDate","time","todayISO","now","articulateDateDue","dateDue","today","arrayMove","arr","fromIndex","toIndex","arrCopy","slice","element","length","splice","randomMessage","messages","Math","floor","random","firstBy","identity","v","ignoreCase","toLowerCase","tb","func","opt","x","this","y","f","direction","prop","v1","uf","preprocess","cmp","v2","makeCompareFunction","a","b","thenBy","Stats","_ref","stats","tasksCompleted","totalTasksCompleted","Object","keys","oneWeekAgo","totalTasksCompletedOneWeek","reduce","total","id","timeCompleted","react_default","createElement","className","bonusStars","starsUsed","concat","Calendar","handleOnChange","value","Fragment","reactstrap_es","onChange","type","min","max","CatGif","_Component","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSave","url","kitty","name","state","newKittyName","popoverOpen","saveKitty","setState","saveButtonClicked","loading","inherits","createClass","key","_this2","axios","method","headers","x-api-key","timeout","then","response","gif","data","console","log","consonants","randomLetter","newName","charAt","toUpperCase","randomName","catch","error","alert","_this3","_this$state","hideCatGif","react_spinners","color","sizeUnit","size","body","xs","outline","onClick","style","width","src","alt","disabled","Component","CustomModal","isOpen","modalType","header","toggleModal","toggle","children","ShopItems","buttonDisabled","totalStars","buyGif","offset","SavedKitties","showSavedKitties","deleteKitty","inventory","striped","catGifs","map","index","scope","Shop","stars","showGif","deductStars","togglesavedKitties","toggleInnerModal","innerModal","currentCatGif","activeTab","tab","_this$props","CustomModal_CustomModal","tabs","classnames","active","toggleTab","tabId","Shop_ShopItems","CatGif_CatGif","Shop_SavedKitties","toggleshowSavedKitties","AddTask","createItem","event","tasks","selectedPriority","addItem","convertPriority","selectedDate","selectedTag","inputElementValue","inputElement","current","itemInstances","task","text","uuid","hidden","priority","timeCreated","instance","editPanelHidden","settingsHidden","tag","preventDefault","React","createRef","_this$props2","inputChange","onSubmit","innerRef","placeholder","Priority","List","Settings","settings","selectedStyle","changeStyle","changeColor","toggleInactiveTasks","colorHigh","colorMedium","colorLow","Settings_this","label","checked","hideInactive","TaskText","toggleEditItem","handleTextChange","editText","backgroundColor","textDecorationLine","lib_default","stopPropagation","defaultValue","TaskDetails","react_transition_group","in","classNames","TaskButtons","markComplete","sortItems","TaskEditBox","Tags","tags","changeTag","addTag","removeTag","showButtons","Task","TaskText_TaskText","TaskDetails_TaskDetails","TaskButtons_TaskButtons","TaskEditBox_TaskEditBox","Calendar_Calendar","editDate","Priority_Priority","editPriority","Tags_Tags","editTaskTag","ToDo","clone","object","JSON","parse","stringify","newItem","selectedSort","toConsumableArray","sortItemsBy","undo","setTimeout","notify","notifyStyle","background","deleteItem","err","filter","item","changePriority","target","newDate","toggleItems","tasksCopy","forEach","moveFrom","showAll","moveTo","sort","manual","selectSortBy","targetTask","targetPanelState","editTaskText","changeDate","updateDate","selectedColor","styles","newTag","prompt","includes","currentText","hideEditPanels","modals","font","settingsModal","statsModal","shopModal","createShowQueue","Default","Marie","Halloween","prevProps","prevState","saveData","prevTasksCompleted","revisedStats","_this$state2","document","notify_default","sm","md","lg","xl","AddTask_AddTask","List_List","Task_Task","Settings_Settings","Stats_Stats","Shop_Shop","defaultProps","App","localStorage","getItem","src_ToDo","fileName","setItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b770e742.chunk.js","sourcesContent":["const convertDate = (date, convertTo) => {\r\n    const ISODate = new Date(date).toISOString().substring(0, 10)\r\n    if (convertTo === 'ISO') {\r\n        return ISODate\r\n    } else if (convertTo === 'timestamp') {\r\n        return new Date(date).getTime()\r\n    } else if (convertTo === 'local') {\r\n        const year = ISODate.substring(0, 4)\r\n        const month = ISODate.substring(5, 7)\r\n        const day = ISODate.substring(8, 10)\r\n        const date = new Date()\r\n        date.setUTCFullYear(year)\r\n        date.setUTCMonth(month - 1)\r\n        date.setUTCDate(day)\r\n        return date.toLocaleDateString('en-GB')\r\n    }\r\n}\r\n\r\nconst getDate = (time) => {\r\n    if (time === 'today') {\r\n        const todayISO = convertDate(Date.now(), 'ISO')\r\n        const todayTimestamp = convertDate(todayISO, 'timestamp')\r\n        return todayTimestamp\r\n    }\r\n}\r\n\r\nconst articulateDateDue = (dateDue) => {\r\n    let today = convertDate(Date.now(), 'ISO')\r\n    today = convertDate(today, 'timestamp')\r\n    if (dateDue - today < 0) {\r\n        return \"Overdue\"\r\n    }\r\n    if (dateDue - today === 0) {\r\n        return \"Today\"\r\n    } else if (dateDue - today === 86400000) {\r\n        return \"Tomorrow\"\r\n    } else {\r\n        return convertDate(dateDue, 'local')\r\n    }\r\n}\r\n\r\nconst arrayMove = (arr, fromIndex, toIndex) => {\r\n    const arrCopy = arr.slice(0)\r\n    const element = arr[fromIndex]\r\n    if (fromIndex === 0) {\r\n        toIndex = arr.length\r\n    }\r\n    arrCopy.splice(fromIndex, 1)\r\n    arrCopy.splice(toIndex, 0, element)\r\n    return arrCopy\r\n}\r\n\r\nexport { convertDate, getDate, articulateDateDue, arrayMove }","const randomMessage = () => {\r\n    const messages = [\r\n        \"Great job! 👍\",\r\n        \"Nice! 👌\",\r\n        \"You're doing so great!\",\r\n        \"You're on a roll!\",\r\n        \"We're doing it! 😁\",\r\n        \"Weow! 😺\",\r\n        \"A++ for effort!✨\",\r\n        \"Cool 😎\",\r\n        \"Amazing! 😄\",\r\n        \"Impressive 😎\",\r\n        \"Incredible! 👏\",\r\n        \"Nice moves! 🕺\",\r\n        \"Making progress! 😊\"\r\n    ]\r\n    return messages[Math.floor(Math.random() * messages.length)]\r\n}\r\n\r\nexport { randomMessage }","/***\r\n   Copyright 2013 Teun Duynstee\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n     http://www.apache.org/licenses/LICENSE-2.0\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\nvar firstBy = (function() {\r\n\r\n    function identity(v){return v;}\r\n\r\n    function ignoreCase(v){return typeof(v)===\"string\" ? v.toLowerCase() : v;}\r\n\r\n    function makeCompareFunction(f, opt){\r\n        opt = typeof(opt)===\"number\" ? {direction:opt} : opt||{};\r\n        if(typeof(f)!=\"function\"){\r\n            var prop = f;\r\n            // make unary function\r\n            f = function(v1){return !!v1[prop] ? v1[prop] : \"\";}\r\n        }\r\n        if(f.length === 1) {\r\n            // f is a unary function mapping a single item to its sort score\r\n            var uf = f;\r\n            var preprocess = opt.ignoreCase?ignoreCase:identity;\r\n            var cmp = opt.cmp || function(v1,v2) {return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;}\r\n            f = function(v1,v2) {return cmp(preprocess(uf(v1)), preprocess(uf(v2)));}\r\n        }\r\n        if(opt.direction === -1) return function(v1,v2){return -f(v1,v2)};\r\n        return f;\r\n    }\r\n\r\n    /* adds a secondary compare function to the target function (`this` context)\r\n       which is applied in case the first one returns 0 (equal)\r\n       returns a new compare function, which has a `thenBy` method as well */\r\n    function tb(func, opt) {\r\n        /* should get value false for the first call. This can be done by calling the \r\n        exported function, or the firstBy property on it (for es6 module compatibility)\r\n        */\r\n        var x = (typeof(this) == \"function\" && !this.firstBy) ? this : false;\r\n        var y = makeCompareFunction(func, opt);\r\n        var f = x ? function(a, b) {\r\n                        return x(a,b) || y(a,b);\r\n                    }\r\n                  : y;\r\n        f.thenBy = tb;\r\n        return f;\r\n    }\r\n    tb.firstBy = tb;\r\n    return tb;\r\n})();\r\n\r\nexport { firstBy }","import React from 'react'\r\n\r\nexport const Stats = ({ stats }) => {\r\n    const tasksCompleted = stats.tasksCompleted\r\n    const totalTasksCompleted = Object.keys(tasksCompleted).length\r\n    const oneWeekAgo = Date.now() - (60 * 60 * 24 * 7 * 1000)\r\n    const totalTasksCompletedOneWeek = Object.keys(tasksCompleted)\r\n        .reduce((total, id) => {\r\n            if (tasksCompleted[id].timeCompleted > oneWeekAgo) {\r\n                total++\r\n            }\r\n            return total\r\n        }, 0)\r\n    return (\r\n        <div className='align-center'>\r\n            <div className='star-big'>\r\n                {\"★\"}\r\n            </div>\r\n            <h1>{\"Stars: \"}<span className=\"special-text\">{totalTasksCompleted + stats.bonusStars - stats.starsUsed}</span></h1>\r\n            <div>\r\n                {`Tasks completed: ${totalTasksCompleted}`}\r\n            </div>\r\n            <div>\r\n                {`This week: ${totalTasksCompletedOneWeek}`}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Input } from 'reactstrap'\r\n\r\nexport const Calendar = ({ handleOnChange, value, convertDate }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Input \r\n                className='calendar-element'\r\n                onChange={handleOnChange} type='date'\r\n                value={value}\r\n                min={convertDate(Date.now(), 'ISO')}\r\n                max='2019-12-31'\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Button, Card, CardTitle, CardHeader, Row, Col } from 'reactstrap'\r\nimport { ClipLoader } from 'react-spinners'\r\nimport { randomName } from './randomName'\r\n\r\nexport class CatGif extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { \r\n            loading: true,\r\n            saveButtonClicked: false,\r\n            newKittyName: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios({\r\n            method: 'get',\r\n            url: 'https://api.thecatapi.com/v1/images/search?limit=1&mime_types=gif&format=json&order=RANDOM',\r\n            headers: { 'x-api-key': 'f5568fae-d85b-4310-8e88-cb282e0e2bac' },\r\n            timeout: 20000 \r\n        })\r\n            .then(response => {\r\n                const gif = response.data\r\n                console.log(gif[0].url)\r\n                this.setState({\r\n                    loading: false,\r\n                    newKittyName: randomName(),\r\n                    gif\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n\r\n    handleSave = (url) => {\r\n        const kitty = {\r\n            url: url,\r\n            name: this.state.newKittyName,\r\n            popoverOpen: false\r\n        }\r\n        this.props.saveKitty(kitty)\r\n        this.setState({ saveButtonClicked: true })\r\n    }\r\n\r\n    render() {\r\n        const { loading, gif, saveButtonClicked, newKittyName } = this.state\r\n        const { hideCatGif } = this.props\r\n        return (\r\n            (loading) ?\r\n                <div className='align-center'>\r\n                    <ClipLoader\r\n                        color='#007bff'\r\n                        sizeUnit='px'\r\n                        size={50}\r\n                        loading={loading}\r\n                    />\r\n                </div>\r\n                :\r\n                <Card body className='text-center'>\r\n                    <CardTitle>\r\n                        <Row>\r\n                            <Col className='align-left' xs='9'>\r\n                                <CardTitle>\r\n                                    {`Here's your new kitty! - ${newKittyName}`}\r\n                                </CardTitle>\r\n                            </Col>\r\n                            <Col className='align-right' xs='3'>\r\n                                <Button\r\n                                    outline\r\n                                    onClick={hideCatGif}\r\n                                >\r\n                                    {\"X\"}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardTitle>\r\n                    <div className='align-center margin-bottom-5 margin-top-5'>\r\n                        <img\r\n                            className='rounded-border'\r\n                            style={{ width: '100%' }}\r\n                            src={gif[0].url}\r\n                            alt=\"This should be a cat gif...\"\r\n                        />\r\n                    </div>\r\n                    <Button\r\n                        onClick={() => this.handleSave(gif[0].url)}\r\n                        color={(saveButtonClicked) ? 'success' : 'info'}\r\n                        disabled={saveButtonClicked}\r\n                    >\r\n                        {(saveButtonClicked) ? \"Saved!\" : \"Save Kitty\"}\r\n                    </Button>\r\n                </Card>\r\n\r\n        )\r\n    }\r\n}","const randomName = () => {\r\n    const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\r\n    const doubleConsonants = ['bb', 'dd', 'ff', 'gg', 'll', 'mm', 'nn', 'pp', 'rr', 'ss', 'tt', 'vv', 'zz']\r\n    const vowels = ['a', 'e', 'i', 'o', 'u']\r\n    const doubleVowels = ['au', 'ai', 'ea', 'ee', 'eu', 'eo', 'ia', 'io', 'oo', 'ou', 'ui']\r\n    const endings = ['y', 'a', 'e', 's', 'ie', 'ia', 'er', 'el', 'on', 'en', 'ur', 'es', 'as', 'sy', 'ely', 'ley', 'ina', 'ers', 'elyn', 'ica', 'arin', ]\r\n    const randomLetter = (type) => type[Math.floor(Math.random() * type.length)]\r\n    let newName =\r\n        randomLetter(consonants) + \r\n        ((Math.random() > 0.4) ? randomLetter(doubleVowels) : randomLetter(vowels)) + \r\n        ((Math.random() > 0.8) ? randomLetter(doubleConsonants) : randomLetter(consonants)) + \r\n        randomLetter(endings)\r\n    newName = newName.charAt(0).toUpperCase() + newName.slice(1)\r\n    return newName\r\n}\r\n\r\nexport { randomName }","import React from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nexport const CustomModal = (props) => {\r\n    const { className, isOpen, modalType, header, toggleModal } = props\r\n    return (\r\n        <Modal\r\n            isOpen={isOpen}\r\n            toggle={() => toggleModal(modalType)}\r\n        >\r\n            <ModalHeader toggle={() => toggleModal(modalType)}>\r\n                {header}\r\n            </ModalHeader>\r\n            <ModalBody className={className}>\r\n                {props.children}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    color='primary'\r\n                    onClick={() => toggleModal(modalType)}\r\n                >\r\n                    {\"OK\"}\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Badge,\r\n    Collapse,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    CardText,\r\n    Popover,\r\n    PopoverHeader,\r\n    PopoverBody,\r\n    Table,\r\n    TabContent,\r\n    TabPane,\r\n    Nav,\r\n    NavItem,\r\n    NavLink\r\n} from 'reactstrap'\r\nimport { CatGif } from './CatGif'\r\nimport { CustomModal } from './CustomModal'\r\nimport classnames from 'classnames'\r\n\r\nconst ShopItems = (props) => {\r\n    const { buttonDisabled, totalStars, buyGif } = props\r\n    return (\r\n        <Row className='margin-top-10'>\r\n            <Col\r\n                xs={{ size: 10, offset: 1 }}\r\n            >\r\n                <Card className='margin-bottom-10'>\r\n                    <CardHeader>{\"Items\"}</CardHeader>\r\n                    <CardBody>\r\n                        <Card className='align-center'>\r\n                            <CardBody>\r\n                                <CardText>{\"1 x Cat Gif: ⭐2\"}</CardText>\r\n                                <Button\r\n                                    className='buy-button'\r\n                                    color='warning'\r\n                                    disabled={buttonDisabled || totalStars < 2}\r\n                                    onClick={() => buyGif(2)}\r\n                                >\r\n                                    {\"Retrieve Cuteness\"}\r\n                                </Button>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nconst SavedKitties = (props) => {\r\n    const { showSavedKitties, deleteKitty, inventory, toggleModal } = props\r\n    return (\r\n        <Row className='margin-top-10'>\r\n            <Col>\r\n                <Collapse isOpen={showSavedKitties}>\r\n                    <Table striped>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Kitty</th>\r\n                                <th>Gif</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {inventory.catGifs.map((gif, index) =>\r\n                                <tr>\r\n                                    <th scope='row'>{index + 1}</th>\r\n                                    <td>{gif.name}</td>\r\n                                    <td>\r\n                                        <Button\r\n                                            color='link'\r\n                                            onClick={() => toggleModal(gif)}\r\n                                        >\r\n                                            {\"View\"}\r\n                                        </Button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Button\r\n                                            color='danger'\r\n                                            onClick={() => deleteKitty(index)}\r\n                                        >\r\n                                            {\"x\"}\r\n                                        </Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Collapse>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport class Shop extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            showGif: false,\r\n            buttonDisabled: false,\r\n            showSavedKitties: false,\r\n            innerModal: false,\r\n            currentCatGif: '',\r\n            activeTab: '1'\r\n        }\r\n    }\r\n\r\n    buyGif = (stars) => {\r\n        this.setState({\r\n            showGif: true,\r\n            buttonDisabled: true\r\n        })\r\n        this.props.deductStars(stars)\r\n    }\r\n\r\n    hideCatGif = () => {\r\n        this.setState({\r\n            showGif: false,\r\n            buttonDisabled: false\r\n        })\r\n    }\r\n\r\n    togglesavedKitties = () => {\r\n        this.setState({ showSavedKitties: !this.state.showSavedKitties })\r\n    }\r\n\r\n    toggleInnerModal = (gif) => {\r\n        if (this.state.innerModal) {\r\n            this.setState({\r\n                innerModal: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                innerModal: true,\r\n                currentCatGif: gif\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleTab(tab) {\r\n        if (this.state.activeTab !== tab) {\r\n            this.setState({\r\n                activeTab: tab,\r\n                showSavedKitties: !this.state.showSavedKitties\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { stats, inventory, saveKitty, deleteKitty } = this.props\r\n        const { buttonDisabled, showSavedKitties, innerModal, currentCatGif } = this.state\r\n        const totalStars = Object.keys(stats.tasksCompleted).length + stats.bonusStars - stats.starsUsed\r\n        return (\r\n            <React.Fragment>\r\n                <CustomModal\r\n                    isOpen={innerModal}\r\n                    header={currentCatGif.name}\r\n                    toggleModal={this.toggleInnerModal}\r\n                >\r\n                    <img\r\n                        style={{ width: '100%' }}\r\n                        src={currentCatGif.url}\r\n                        alt=\"This should be a cat gif..\"\r\n                    >\r\n                    </img>\r\n                </CustomModal>\r\n                <Nav tabs>\r\n                    <NavItem>\r\n                        <NavLink\r\n                            className={classnames({ active: this.state.activeTab === '1' })}\r\n                            onClick={() => this.toggleTab('1')}\r\n                        >\r\n                            {\"Shop\"}\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink\r\n                            className={classnames({ active: this.state.activeTab === '2' })}\r\n                            onClick={() => this.toggleTab('2')}\r\n                        >\r\n                            {\"Saved Kitties\"}\r\n                        </NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n                <TabContent activeTab={this.state.activeTab}>\r\n                    <TabPane tabId=\"1\">\r\n                        <Row className='margin-top-10'>\r\n                            <Col xs={{ size: 6, offset: 6 }}>\r\n                                <h4 className='align-center'>\r\n                                    {\"Stars \"}\r\n                                    <Badge\r\n                                        className='golden-text'\r\n                                        color='primary'>\r\n                                        <span className='drop-shadow'>\r\n                                            {totalStars}\r\n                                        </span>\r\n                                    </Badge>\r\n                                </h4>\r\n                            </Col>\r\n                        </Row>\r\n                        <ShopItems\r\n                            buttonDisabled={buttonDisabled}\r\n                            totalStars={totalStars}\r\n                            buyGif={this.buyGif}\r\n                        />\r\n                        {(!this.state.showGif) ? null :\r\n                            <CatGif\r\n                                saveKitty={saveKitty}\r\n                                hideCatGif={this.hideCatGif}\r\n                            />}\r\n                    </TabPane>\r\n                    <TabPane tabId=\"2\">\r\n                        <SavedKitties\r\n                            toggleshowSavedKitties={this.toggleshowSavedKitties}\r\n                            deleteKitty={deleteKitty}\r\n                            showSavedKitties={showSavedKitties}\r\n                            inventory={inventory}\r\n                            toggleModal={this.toggleInnerModal}\r\n                        />\r\n                    </TabPane>\r\n                </TabContent>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport uuid from 'uuid'\r\nimport { Row, Col, Input, Button, Form, FormGroup } from 'reactstrap'\r\n\r\nexport class AddTask extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputElement = React.createRef()\r\n    }\r\n    createItem = (event) => {\r\n        const { \r\n            tasks,\r\n            selectedPriority,\r\n            addItem,\r\n            convertPriority,\r\n            convertDate,\r\n            selectedDate,\r\n            selectedTag\r\n        } = this.props\r\n        const inputElementValue = this.inputElement.current.value\r\n        const itemInstances = tasks.reduce(function (total, task) {\r\n            return total + (inputElementValue === task.text ? 1 : 0)\r\n        }, 1)\r\n        const newItem = {\r\n            active: true,\r\n            id: uuid().substring(0, 12),\r\n            hidden: false,\r\n            text: inputElementValue,\r\n            priority: convertPriority(selectedPriority),\r\n            timeCreated: Date.now(),\r\n            dateDue: convertDate(selectedDate, 'timestamp'),\r\n            instance: itemInstances,\r\n            editPanelHidden: true,\r\n            settingsHidden: true,\r\n            tag: (selectedTag === 'None') ? 'None' : selectedTag,\r\n        }\r\n        addItem(newItem)\r\n        this.inputElement.current.value = \"\"\r\n        event.preventDefault()\r\n    }\r\n    render() {\r\n        const { inputChange, buttonDisabled } = this.props\r\n        return (\r\n            <Form onSubmit={this.createItem}>\r\n                <FormGroup>\r\n                    <Row className='row-0 no-gutters'>\r\n                        <Col className='padding-right' xs='9'>\r\n                            <Input \r\n                                type='text'\r\n                                className='input--add-task'\r\n                                onChange={inputChange}\r\n                                innerRef={this.inputElement}\r\n                                placeholder='Enter Task'>\r\n                            </Input>\r\n                        </Col>\r\n                        <Col xs='3'>\r\n                            <Button\r\n                                className='add-button'\r\n                                outline color='primary'\r\n                                disabled={buttonDisabled}\r\n                                type='submit'\r\n                            >\r\n                                {\"Add\"}\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Input } from 'reactstrap'\r\n\r\nexport const Priority = ({ handleOnChange, value }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Input\r\n                type='select'\r\n                className='priority-element'\r\n                value={value}\r\n                onChange={handleOnChange}\r\n            >\r\n                <option value='Low'>Priority: Low</option>\r\n                <option value='Medium'>Medium</option>\r\n                <option value='High'>High</option>\r\n            </Input>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const List = (props) => {\r\n    return (\r\n        <div className='list'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Row, Col, Input, CustomInput } from 'reactstrap'\r\n\r\nexport const Settings = ({ settings, selectedStyle, changeStyle, changeColor, toggleInactiveTasks }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <fieldset>\r\n                <div>\r\n                    <legend>Choose your colours</legend>\r\n                    <div>\r\n                        <Input\r\n                            className='select-style'\r\n                            type='select'\r\n                            value={selectedStyle}\r\n                            onChange={changeStyle}>\r\n                            <option value='None'>None</option>\r\n                            <option value='Default'>Default</option>\r\n                            <option value='Marie'>Marie</option>\r\n                            <option value='Halloween'>Halloween</option>\r\n                        </Input>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='change-color'\r\n                            type='color'\r\n                            value={settings.style.colorHigh}\r\n                            onChange={(event) => changeColor(event, 'colorHigh')}>\r\n                        </input>\r\n                        <label>High Priority</label>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='change-color'\r\n                            type='color'\r\n                            value={settings.style.colorMedium}\r\n                            onChange={(event) => changeColor(event, 'colorMedium')}>\r\n                        </input>\r\n                        <label>Medium Priority</label>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='change-color'\r\n                            type='color'\r\n                            value={settings.style.colorLow}\r\n                            onChange={(event) => this.changeColor(event, 'colorLow')}>\r\n                        </input>\r\n                        <label>Low Priority</label>\r\n                    </div>\r\n                </div>\r\n                <React.Fragment>\r\n                    <div>-----------</div>\r\n                    <Row>\r\n                        <Col>\r\n                            <CustomInput\r\n                                type='checkbox'\r\n                                id='checkbox'\r\n                                label='Show completed tasks'\r\n                                checked={!settings.hideInactive}\r\n                                onChange={toggleInactiveTasks} />\r\n                        </Col>\r\n                    </Row>\r\n                    <div>-----------</div>\r\n                </React.Fragment>\r\n            </fieldset>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport TextareaAutosize from 'react-autosize-textarea'\r\nimport { Row, Col, Button } from 'reactstrap'\r\n\r\nexport const TaskText = ({ settings, task, index, toggleEditItem, handleTextChange, editText, children }) => {\r\n    return (\r\n        <div\r\n            className={(task.active) ? 'task' : 'task animate-background'}\r\n            onClick={() => toggleEditItem(index)}\r\n            style={{\r\n                backgroundColor: (!task.active) ?\r\n                    '#e5e5e5' :\r\n                    (task.priority === 3) ?\r\n                        settings.style.colorLow :\r\n                        (task.priority === 2) ?\r\n                            settings.style.colorMedium :\r\n                            settings.style.colorHigh\r\n            }}\r\n        >\r\n            <span \r\n                style={{\r\n                textDecorationLine: (task.active) ?\r\n                    'none' :\r\n                    'line-through'\r\n                }}\r\n            >\r\n                {(task.editPanelHidden) ?\r\n                    <Row>\r\n                        <Col>\r\n                            {task.text}\r\n                            <span className='instance'>\r\n                                {(task.instance > 1) ?\r\n                                    ` (${task.instance})` :\r\n                                    null}\r\n                            </span>\r\n                        </Col>\r\n                    </Row> :\r\n                    <span>\r\n                        <Row className='edit-text no-gutters'>\r\n                            <Col xs='10'>\r\n                                <TextareaAutosize\r\n                                    className='edit-text-element'\r\n                                    onChange={(event) => handleTextChange(event)}\r\n                                    onClick={(event) => event.stopPropagation()}\r\n                                    defaultValue={task.text}\r\n                                />\r\n                            </Col>\r\n                            <Col xs='2'>\r\n                                <Button\r\n                                    className='edit-text-button'\r\n                                    color='secondary'\r\n                                    size='sm'\r\n                                    onClick={(event) => editText(event, index)}\r\n                                >\r\n                                    {\"OK\"}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </span>}\r\n            </span>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { Row, Col } from 'reactstrap'\r\n\r\nexport const TaskDetails = ({ task, articulateDateDue }) => \r\n    <Row>\r\n        <Col className='task-details'>\r\n            <TransitionGroup>\r\n                <div className='date-due x-small'>\r\n                    {(task.tag === 'None') ?\r\n                        null :\r\n                        <span className='tag'>{task.tag}</span>}\r\n                    {(task.active) ?\r\n                        `Due: ${articulateDateDue(task.dateDue)}` :\r\n                        <React.Fragment>\r\n                            <span className='x-small'>\r\n                                {\"Complete \"}\r\n                            </span>\r\n                            <CSSTransition\r\n                                in={!task.active}\r\n                                timeout={1000}\r\n                                classNames='star'\r\n                            >\r\n                                <span className='star x-small'>\r\n                                    {\"★\"}\r\n                                </span>\r\n                            </CSSTransition>\r\n                            <CSSTransition\r\n                                in={!task.active}\r\n                                timeout={1000}\r\n                                classNames='plus-one'\r\n                            >\r\n                                <span className='plus-one x-small'>\r\n                                    {\" +1\"}\r\n                                </span>\r\n                            </CSSTransition>\r\n                        </React.Fragment>}\r\n                </div>\r\n            </TransitionGroup>\r\n        </Col>\r\n    </Row>","import React from 'react'\r\nimport { Button } from 'reactstrap'\r\n\r\nexport const TaskButtons = ({ task, index, markComplete, sortItems }) => {\r\n    return (\r\n        <div className='item-buttons'>\r\n            <Button\r\n                className='sort-button'\r\n                size='sm'\r\n                outline color='secondary'\r\n                onClick={() => sortItems(index, true)}\r\n            >\r\n                {\"↑\"}\r\n            </Button>\r\n            <Button\r\n                className='delete-item-button'\r\n                size='sm'\r\n                outline\r\n                color={(task.active) ? 'success' : 'danger'}\r\n                onClick={() => markComplete(index)}\r\n            >\r\n                {(task.active) ? \"✓\" : \"✕\"}\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Button } from 'reactstrap'\r\n\r\nexport const TaskEditBox = ({ task, index, markComplete, children }) => {\r\n    return (\r\n        <div className='edit-task' hidden={task.editPanelHidden}>\r\n            <span hidden={!task.active}>\r\n                {children}\r\n            </span>\r\n            <div className='undo'>\r\n                <Button \r\n                    hidden={task.active}\r\n                    className='undo-button'\r\n                    outline\r\n                    color='secondary'\r\n                    onClick={() => markComplete(index, true)}\r\n                >\r\n                    {`Undo \"Mark Complete\"`}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Input, Button } from 'reactstrap'\r\n\r\nexport const Tags = (props) => {\r\n    const { tags, selectedTag, changeTag, addTag, removeTag, showButtons } = props\r\n    return (\r\n        <React.Fragment>\r\n            <Input \r\n                type='select'\r\n                className='select-tag'\r\n                value={selectedTag}\r\n                onChange={changeTag}\r\n            >\r\n                {tags.map((tag, index) => <option key={index} value={tag}>\r\n                    {(tag === 'None') ? 'Tag: None' : tag}\r\n                </option>)}\r\n            </Input>\r\n            {(!showButtons) ? null :\r\n                <React.Fragment>\r\n                    <Button\r\n                        outline\r\n                        color='secondary'\r\n                        size='sm'\r\n                        onClick={removeTag}\r\n                    >\r\n                        {\"-\"}\r\n                    </Button>\r\n                    <Button\r\n                        outline\r\n                        color='secondary'\r\n                        size='sm'\r\n                        onClick={addTag}\r\n                    >\r\n                        {\"+\"}\r\n                    </Button>\r\n                </React.Fragment>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { Row, Col } from 'reactstrap'\r\nimport { TaskText } from './TaskText'\r\nimport { TaskDetails } from './TaskDetails'\r\nimport { TaskButtons } from './TaskButtons'\r\nimport { TaskEditBox } from './TaskEditBox'\r\nimport { Calendar } from './Calendar'\r\nimport { Priority } from './Priority'\r\nimport { Tags } from './Tags'\r\n\r\nexport const Task = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Row className='no-gutters'>\r\n                <Col xs='9'>\r\n                    <TaskText\r\n                        settings={props.settings}\r\n                        task={props.task}\r\n                        index={props.index}\r\n                        handleTextChange={props.handleTextChange}\r\n                        editText={props.editText}\r\n                        toggleEditItem={props.toggleEditItem}\r\n                    >\r\n                        <TaskDetails\r\n                            task={props.task}\r\n                            articulateDateDue={props.articulateDateDue}\r\n                        />\r\n                    </TaskText>\r\n                </Col>\r\n                <Col xs='3'>\r\n                    <TransitionGroup>\r\n                        <CSSTransition\r\n                            key={props.task.id}\r\n                            timeout={500}\r\n                            classNames='fade'>\r\n                            <TaskButtons\r\n                                task={props.task}\r\n                                index={props.index}\r\n                                markComplete={props.markComplete}\r\n                                sortItems={props.sortItems}\r\n                            />\r\n                        </CSSTransition>\r\n                    </TransitionGroup>\r\n                </Col>\r\n            </Row>\r\n            <TaskEditBox\r\n                task={props.task}\r\n                index={props.index}\r\n                markComplete={props.markComplete}>\r\n                <Row>\r\n                    <Col>\r\n                        <Calendar\r\n                            value={props.convertDate(props.task.dateDue, 'ISO')}\r\n                            handleOnChange={(event) => props.editDate(event, props.index)}\r\n                            convertDate={props.convertDate}\r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <Priority\r\n                            value={props.convertPriority(props.task.priority)}\r\n                            handleOnChange={(event) => props.editPriority(event, props.index)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className='margin-top-2'>\r\n                    <Col xs={{ size: 6, offset: 6 }}>\r\n                        <Tags\r\n                            tags={props.tags}\r\n                            index={props.index}\r\n                            selectedTag={props.task.tag}\r\n                            changeTag={(event) => props.editTaskTag(event, props.index)}\r\n                            addTag={props.addTag}\r\n                            removeTag={props.removeTag}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </TaskEditBox>\r\n        </React.Fragment>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport Notifications, { notify } from 'react-notify-toast'\r\nimport uuid from 'uuid'\r\nimport { convertDate, getDate, articulateDateDue, arrayMove } from './functions'\r\nimport { randomMessage } from './randomMessage'\r\nimport { firstBy } from './thenBy.min.js'\r\nimport { Container, Row, Col, Input, Button } from 'reactstrap'\r\nimport { Stats } from './Stats'\r\nimport { Calendar } from './Calendar'\r\nimport { Shop } from './Shop'\r\nimport { AddTask } from './AddTask'\r\nimport { CustomModal } from './CustomModal'\r\nimport { Priority } from './Priority'\r\nimport { List } from './List'\r\nimport { Settings } from './Settings'\r\nimport { Task } from './Task'\r\nimport { Tags } from './Tags'\r\n\r\nclass ToDo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            tasks: (this.props.tasks) ? JSON.parse(this.props.tasks) :\r\n                [{\r\n                    active: true,\r\n                    hidden: false,\r\n                    id: uuid().substring(0, 10),\r\n                    text: \"Sample Task ✨\",\r\n                    priority: 3,\r\n                    time: Date.now(),\r\n                    instance: 1,\r\n                    editPanelHidden: true,\r\n                    dateDue: getDate('today'),\r\n                    tag: 'None'\r\n                }],\r\n            inventory: (this.props.inventory) ? JSON.parse(this.props.inventory) :\r\n                {\r\n                    catGifs: []\r\n                },\r\n            settings: (this.props.settings) ? JSON.parse(this.props.settings) :\r\n                {\r\n                    style: {\r\n                        colorHigh: '#f5c6cb',\r\n                        colorMedium: '#ffeeba',\r\n                        colorLow: '#bee5eb',\r\n                        backgroundColor: '#ffffff',\r\n                        font: ''\r\n                    },\r\n                    hideInactive: false\r\n                },\r\n            stats: (this.props.stats) ? JSON.parse(this.props.stats) :\r\n                {\r\n                    tasksCompleted: {},\r\n                    bonusStars: 0,\r\n                    starsUsed: 0,\r\n                },\r\n            modals: {\r\n                settingsModal: false,\r\n                statsModal: false,\r\n                shopModal: false\r\n            },\r\n            tags: (this.props.tags) ? JSON.parse(this.props.tags) : ['None'],\r\n            buttonDisabled: true,\r\n            selectedPriority: 'Low',\r\n            selectedSort: 'None',\r\n            selectedDate: this.props.convertDate(Date.now(), 'ISO'),\r\n            selectedStyle: 'None',\r\n            selectedTag: 'None',\r\n            editTaskText: '',\r\n        }\r\n        this.selectSortBy = React.createRef()\r\n        this.notify = notify.createShowQueue()\r\n        this.styles = {\r\n            Default: ['#bee5eb', '#ffeeba', '#f5c6cb', '#ffffff'],\r\n            Marie: ['#fce8f7', '#f2b5e2', '#f46ed0', '#ffffff'],\r\n            Halloween: ['#feeeb8', '#ffa100', '#e76427', '#000000']\r\n        }\r\n        this.notifyStyle = { background: '#007bff', text: '#ffffff' }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { tasks, inventory, settings, stats, tags } = this.state\r\n        const { saveData } = this.props\r\n        console.log(this.state)\r\n        if (prevState.tasks !== tasks) {\r\n            saveData(tasks, 'tasks')\r\n        }\r\n        if (prevState.inventory !== inventory) {\r\n            saveData(inventory, 'inventory_3')\r\n        }\r\n        if (prevState.settings !== settings) {\r\n            saveData(settings, 'settings')\r\n        }\r\n        if (prevState.stats !== stats) {\r\n            saveData(stats, 'stats_5')\r\n        }\r\n        if (prevState.tags !== tags) {\r\n            saveData(tags, 'tags_2')\r\n        }\r\n        // Uncredit bonus stars on 'mark uncomplete'\r\n        const prevTasksCompleted = Object.keys(prevState.stats.tasksCompleted).length\r\n        const tasksCompleted = Object.keys(stats.tasksCompleted).length\r\n        if (tasksCompleted < prevTasksCompleted) {\r\n            if (prevTasksCompleted % 10 === 0) {\r\n                let revisedStats = this.clone(stats)\r\n                revisedStats.bonusStars -= 2\r\n                console.log(\"Stars are being removed..\")\r\n                this.setState({ stats: revisedStats })\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.hideEditPanels()\r\n        this.sortItems()\r\n        console.log(this.state)\r\n        this.notify(\"You got this! 😊\", 'custom', 2000, this.notifyStyle)\r\n    }\r\n\r\n    clone = (object) => {\r\n        return JSON.parse(JSON.stringify(object))\r\n    }\r\n\r\n    addItem = (newItem) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks = [...tasks, newItem]\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({\r\n            tasks: tasks,\r\n            buttonDisabled: true\r\n        })\r\n    }\r\n\r\n    markComplete = (index, undo) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        let stats = this.clone(this.state.stats)\r\n        const task = tasks[index]\r\n        if (tasks.length === 0) {\r\n            console.log('List is empty')\r\n        } else {\r\n            try {\r\n                const itemIsActive = task.active\r\n                if (itemIsActive) {\r\n                    task.active = false\r\n                    stats.tasksCompleted[task.id] = {\r\n                        timeCreated: task.timeCreated,\r\n                        timeCompleted: Date.now()\r\n                    }\r\n                    if (this.state.settings.hideInactive) {\r\n                        tasks = this.sortItemsBy(tasks, 'active')\r\n                    }\r\n                    this.setState({\r\n                        tasks: tasks,\r\n                        stats: stats\r\n                    })\r\n                    // Stars stuff\r\n                    const tasksCompleted = Object.keys(stats.tasksCompleted).length\r\n                    if (tasksCompleted % 5 === 0) {\r\n                        setTimeout(() => {\r\n                            this.notify(randomMessage(), 'custom', 2000, this.notifyStyle)\r\n                        }, 500)\r\n                    }\r\n                    if (tasksCompleted % 10 === 0) {\r\n                        setTimeout(() => {\r\n                            this.notify('⭐+2 STARS BONUS⭐', 'custom', 2000, { background: '#fff5be', text: '#000000' })\r\n                            stats.bonusStars += 2\r\n                            this.setState({ stats: stats })\r\n                        }, 500)\r\n                    }\r\n                } else if (undo) {\r\n                    task.editPanelHidden = true\r\n                    task.active = true\r\n                    delete stats.tasksCompleted[task.id]\r\n                    this.setState({\r\n                        tasks: tasks,\r\n                        stats: stats\r\n                    })\r\n                } else {\r\n                    this.deleteItem(index)\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteItem = (key) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks = tasks.filter((item, index) => index !== key)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    changePriority = (event) => {\r\n        const selectedPriority = event.target.value\r\n        this.setState({ selectedPriority: selectedPriority })\r\n    }\r\n\r\n    convertPriority = (priority) => {\r\n        if (typeof priority === 'string') {\r\n            return (priority === 'Low') ? 3\r\n                : (priority === 'Medium') ? 2\r\n                    : 1\r\n        } else {\r\n            return (priority === 3) ? 'Low'\r\n                : (priority === 2) ? 'Medium'\r\n                    : 'High'\r\n        }\r\n    }\r\n\r\n    editPriority = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const task = tasks[index]\r\n        const selectedPriority = event.target.value\r\n        task.priority = this.convertPriority(selectedPriority)\r\n        task.editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    editDate = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const newDate = event.target.value\r\n        tasks[index].dateDue = convertDate(newDate, 'timestamp')\r\n        tasks[index].editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    inputChange = (event) => {\r\n        const currentText = event.target.value\r\n        if (currentText === '') {\r\n            this.setState({ buttonDisabled: true })\r\n        } else {\r\n            this.setState({ buttonDisabled: false })\r\n        }\r\n    }\r\n\r\n    toggleItems = (tasks, type, tag) => {\r\n        let tasksCopy = this.clone(tasks)\r\n        if (type === 'selected tag') {\r\n            tasksCopy.forEach(task => (task.tag !== tag || task.tag === 'None') && (task.hidden = true))\r\n        } else if (type === 'tags only') {\r\n            tasksCopy.forEach(task => (task.tag === 'None') && (task.hidden = true))\r\n        } else if (type === 'show all') {\r\n            tasksCopy.forEach(task => (task.hidden === true) && (task.hidden = false))\r\n        }\r\n        return tasksCopy\r\n    }\r\n\r\n    sortItemsBy = (tasks, selectedSort, moveFrom) => {\r\n        const showAll = this.toggleItems(tasks, 'show all')\r\n        if (selectedSort === 'Manual') {\r\n            const moveTo = moveFrom - 1\r\n            return tasks = this.props.arrayMove(tasks, moveFrom, moveTo)\r\n            //return tasks.sort(firstBy('active', -1))\r\n        }\r\n        if (selectedSort === 'None') {\r\n            return showAll\r\n        } else if (selectedSort === 'Priority') {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy('active', -1)\r\n                    .thenBy('priority')\r\n                    .thenBy('dateDue')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'Date Due') {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy('active', -1)\r\n                    .thenBy('dateDue')\r\n                    .thenBy('priority')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'A-Z') {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy('active', -1)\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'Tags') {\r\n            tasks = showAll\r\n            tasks = this.toggleItems(tasks, 'tags only')\r\n            return tasks.sort(\r\n                firstBy('tag')\r\n                    .thenBy('priority')\r\n                    .thenBy('dateDue')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'Selected Tag') {\r\n            tasks = this.toggleItems(tasks, 'selected tag', this.state.selectedTag)\r\n            return tasks.sort(\r\n                firstBy('tag')\r\n                    .thenBy('priority')\r\n                    .thenBy('dateDue')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'active') {\r\n            return tasks.sort(firstBy('active', -1))\r\n        }\r\n    }\r\n\r\n    sortItems = (index, manual) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        const selectedSort = this.selectSortBy.current.value\r\n        if (manual) {\r\n            if (selectedSort === 'None') {\r\n                console.log(\"correct\")\r\n                tasks = this.sortItemsBy(tasks, 'Manual', index)\r\n                this.setState({ tasks: tasks })\r\n            } else {\r\n                tasks = this.sortItemsBy(tasks, 'Manual', index)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: 'None'\r\n                })\r\n            }\r\n        } else {\r\n            if (selectedSort === 'None') {\r\n                tasks = this.sortItemsBy(tasks, selectedSort)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: selectedSort\r\n                })\r\n            } else {\r\n                tasks = this.sortItemsBy(tasks, selectedSort)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: selectedSort\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleEditItem = (index) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        const targetTask = tasks[index]\r\n        const targetPanelState = targetTask.editPanelHidden\r\n        tasks.forEach((task) => {\r\n            if (task.editPanelHidden === false && task !== targetTask) {\r\n                task.editPanelHidden = true\r\n            }\r\n        })\r\n        tasks[index].editPanelHidden = !targetPanelState\r\n        this.setState({\r\n            tasks: tasks,\r\n            editTaskText: targetTask.text\r\n        })\r\n    }\r\n\r\n    changeDate = (event) => {\r\n        const updateDate = event.target.value\r\n        this.setState({ selectedDate: updateDate })\r\n    }\r\n\r\n    changeColor = (event, selectedColor) => {\r\n        let settings = this.clone(this.state.settings)\r\n        settings.style[selectedColor] = event.target.value\r\n        this.setState({\r\n            settings: settings,\r\n            selectedStyle: 'None'\r\n        })\r\n    }\r\n\r\n    changeStyle = (event) => {\r\n        let settings = this.clone(this.state.settings)\r\n        const selectedStyle = event.target.value\r\n        const style = settings.style\r\n        if (style === 'None') {\r\n            this.setState({ selectedStyle: selectedStyle })\r\n        } else {\r\n            style.colorLow = this.styles[selectedStyle][0]\r\n            style.colorMedium = this.styles[selectedStyle][1]\r\n            style.colorHigh = this.styles[selectedStyle][2]\r\n            style.backgroundColor = this.styles[selectedStyle][3]\r\n            this.setState({\r\n                settings: settings,\r\n                selectedStyle: selectedStyle\r\n            })\r\n        }\r\n    }\r\n\r\n    changeTag = (event) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const tag = event.target.value\r\n        if (selectedSort === 'Selected Tag') {\r\n            tasks = this.toggleItems(tasks, 'show all')\r\n            tasks = this.toggleItems(tasks, 'selected tag', tag)\r\n            this.setState({\r\n                tasks: tasks,\r\n                selectedTag: tag\r\n            })\r\n        } else {\r\n            this.setState({ selectedTag: tag })\r\n        }\r\n    }\r\n\r\n    addTag = () => {\r\n        let tags = this.clone(this.state.tags)\r\n        const newTag = prompt(\"Enter a new tag\")\r\n        if (newTag === '' || tags.includes(newTag)) {\r\n            alert(\"Invalid tag or duplicate\")\r\n        } else {\r\n            tags = [...tags, newTag]\r\n            this.setState({\r\n                tags: tags,\r\n                selectedTag: newTag\r\n            })\r\n        }\r\n    }\r\n\r\n    removeTag = () => {\r\n        const { selectedTag } = this.state\r\n        let tags = this.clone(this.state.tags)\r\n        tags = tags.filter(tag => tag !== selectedTag || tag === 'None')\r\n        this.setState({\r\n            tags: tags,\r\n            selectedTag: 'None'\r\n        })\r\n    }\r\n\r\n    editTaskTag = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        let task = tasks[index]\r\n        task.tag = event.target.value\r\n        task.editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    editText = (event, index) => {\r\n        event.stopPropagation()\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks[index].text = this.state.editTaskText\r\n        tasks[index].editPanelHidden = true\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    handleTextChange = (event) => {\r\n        const currentText = event.target.value\r\n        this.setState({ editTaskText: currentText })\r\n    }\r\n\r\n    hideEditPanels = () => {\r\n        const { tasks } = this.state\r\n        tasks.forEach(task => (task.editPanelHidden === false) && (task.editPanelHidden = true))\r\n    }\r\n\r\n    toggleInactiveTasks = () => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        let settings = this.clone(this.state.settings)\r\n        settings.hideInactive = !settings.hideInactive\r\n        tasks = this.sortItemsBy(tasks, 'active')\r\n        this.setState({\r\n            tasks: tasks,\r\n            settings: settings\r\n        })\r\n    }\r\n\r\n    toggleModal = (modalType) => {\r\n        let modals = this.clone(this.state.modals)\r\n        modals[modalType] = !modals[modalType]\r\n        this.setState({ modals: modals })\r\n    }\r\n\r\n    deductStars = (stars) => {\r\n        let stats = this.clone(this.state.stats)\r\n        stats.starsUsed += stars\r\n        this.setState({ stats: stats })\r\n    }\r\n\r\n    saveKitty = (kitty) => {\r\n        let inventory = this.clone(this.state.inventory)\r\n        inventory.catGifs = [...inventory.catGifs, kitty]\r\n        this.setState({ inventory: inventory })\r\n    }\r\n\r\n    deleteKitty = (kitty) => {\r\n        let inventory = this.clone(this.state.inventory)\r\n        inventory.catGifs = inventory.catGifs.filter((item, index) => index !== kitty)\r\n        this.setState({ inventory: inventory })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            tasks,\r\n            inventory,\r\n            settings,\r\n            stats,\r\n            tags,\r\n            buttonDisabled,\r\n            selectedPriority,\r\n            selectedDate,\r\n            selectedTag,\r\n            selectedSort,\r\n            selectedStyle,\r\n            modals\r\n        } = this.state\r\n        const {\r\n            convertDate,\r\n            articulateDateDue\r\n        } = this.props\r\n        document.body.style.backgroundColor = settings.style.backgroundColor\r\n        return (\r\n            <Container>\r\n                <Notifications />\r\n                <Row>\r\n                    <Col className='todo' sm='10' md='7' lg='5' xl='5'>\r\n                        <AddTask\r\n                            tasks={tasks}\r\n                            addItem={this.addItem}\r\n                            inputChange={this.inputChange}\r\n                            convertPriority={this.convertPriority}\r\n                            convertDate={convertDate}\r\n                            buttonDisabled={buttonDisabled}\r\n                            selectedPriority={selectedPriority}\r\n                            selectedDate={selectedDate}\r\n                            selectedTag={selectedTag} />\r\n                        <Row className='row-1 no-gutters'>\r\n                            <Col>\r\n                                <div className='calendar'>\r\n                                    <Calendar\r\n                                        value={selectedDate}\r\n                                        handleOnChange={this.changeDate}\r\n                                        convertDate={convertDate} />\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <div className='priority--top'>\r\n                                    <Priority\r\n                                        value={selectedPriority}\r\n                                        handleOnChange={this.changePriority} />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='row-2 no-gutters'>\r\n                            <Col\r\n                                className='sort padding-right'\r\n                                xs='5'>\r\n                                <Input\r\n                                    type='select'\r\n                                    className='select-sort'\r\n                                    value={selectedSort}\r\n                                    innerRef={this.selectSortBy}\r\n                                    onChange={this.sortItems}\r\n                                >\r\n                                    <option value='None'>Sort: None</option>\r\n                                    <option value='Priority'>Priority</option>\r\n                                    <option value='Date Due'>Date Due</option>\r\n                                    <option value='A-Z'>A-Z</option>\r\n                                    <option value='Tags'>Tags</option>\r\n                                    <option value='Selected Tag'>Selected Tag</option>\r\n                                </Input>\r\n                            </Col>\r\n                            <Col\r\n                                className='manage-tags'\r\n                                xs='7'\r\n                            >\r\n                                <Tags\r\n                                    tags={tags}\r\n                                    selectedTag={selectedTag}\r\n                                    changeTag={this.changeTag}\r\n                                    addTag={this.addTag}\r\n                                    removeTag={this.removeTag}\r\n                                    showButtons\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <List className='list'>\r\n                            <TransitionGroup>\r\n                                {tasks.map((task, index) =>\r\n                                    (task.hidden) ?\r\n                                        null :\r\n                                        (!task.active && settings.hideInactive) ?\r\n                                            null :\r\n                                            <CSSTransition\r\n                                                key={task.id}\r\n                                                timeout={500}\r\n                                                classNames='fade'\r\n                                            >\r\n                                                <Task\r\n                                                    tasks={tasks}\r\n                                                    settings={settings}\r\n                                                    task={task}\r\n                                                    index={index}\r\n                                                    handleTextChange={this.handleTextChange}\r\n                                                    editText={this.editText}\r\n                                                    toggleEditItem={this.toggleEditItem}\r\n                                                    articulateDateDue={articulateDateDue}\r\n                                                    markComplete={this.markComplete}\r\n                                                    sortItems={this.sortItems}\r\n                                                    convertPriority={this.convertPriority}\r\n                                                    editDate={this.editDate}\r\n                                                    convertDate={convertDate}\r\n                                                    editPriority={this.editPriority}\r\n                                                    tags={tags}\r\n                                                    editTaskTag={this.editTaskTag}\r\n                                                    addTag={this.addTag}\r\n                                                    removeTag={this.removeTag}\r\n                                                />\r\n                                            </CSSTransition>\r\n                                )}\r\n                            </TransitionGroup>\r\n                        </List>\r\n                        <Row className='row-3 no-gutters'>\r\n                            <Button\r\n                                className='settings-button'\r\n                                outline\r\n                                color='secondary'\r\n                                onClick={() => this.toggleModal('settingsModal')}\r\n                            >\r\n                                {\"⚙\"}\r\n                            </Button>\r\n                            <Button\r\n                                className='stats-button'\r\n                                outline\r\n                                color='secondary'\r\n                                onClick={() => this.toggleModal('statsModal')}\r\n                            >\r\n                                {\"⭐\"}\r\n                            </Button>\r\n                            <Button\r\n                                className='cat-button'\r\n                                outline\r\n                                color='secondary'\r\n                                onClick={() => this.toggleModal('shopModal')}\r\n                            >\r\n                                {\"🐱\"}\r\n                            </Button>\r\n                        </Row>\r\n                        <Row className='settings no-gutters'>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <CustomModal\r\n                    isOpen={modals.settingsModal}\r\n                    modalType='settingsModal'\r\n                    header=\"Settings\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Settings\r\n                        settings={settings}\r\n                        selectedStyle={selectedStyle}\r\n                        changeStyle={this.changeStyle}\r\n                        changeColor={this.changeColor}\r\n                        toggleInactiveTasks={this.toggleInactiveTasks}\r\n                    />\r\n                </CustomModal>\r\n                <CustomModal\r\n                    className='rainbow-background'\r\n                    isOpen={modals.statsModal}\r\n                    modalType='statsModal'\r\n                    header=\"Stats\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Stats\r\n                        stats={stats}\r\n                    />\r\n                </CustomModal>\r\n                <CustomModal\r\n                    isOpen={modals.shopModal}\r\n                    modalType='shopModal'\r\n                    header=\"Le Catte Gif Shoppe\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Shop\r\n                        stats={stats}\r\n                        inventory={inventory}\r\n                        saveKitty={this.saveKitty}\r\n                        deleteKitty={this.deleteKitty}\r\n                        deductStars={this.deductStars}\r\n                    />\r\n                </CustomModal>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nToDo.defaultProps = {\r\n    convertDate: convertDate,\r\n    getDate: getDate,\r\n    articulateDateDue: articulateDateDue,\r\n    arrayMove: arrayMove\r\n}\r\n\r\nexport default ToDo","import React, { Component } from 'react';\nimport { convertDate, articulateDateDue, arrayMove } from './functions'\nimport ToDo from './ToDo'\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        const tasks = localStorage.getItem('tasks')\n        const inventory = localStorage.getItem('inventory_3')\n        const settings = localStorage.getItem('settings')\n        const stats = localStorage.getItem('stats_5')\n        const tags = localStorage.getItem('tags_2')\n        const saveData = (data, fileName) => localStorage.setItem(fileName, JSON.stringify(data))\n        return (\n            <ToDo\n                tasks={tasks}\n                inventory={inventory}\n                settings={settings}\n                stats={stats}\n                tags={tags}\n                saveData={saveData}\n                convertDate={convertDate}\n                articulateDateDue={articulateDateDue}\n                arrayMove={arrayMove}\n            />\n        )\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}