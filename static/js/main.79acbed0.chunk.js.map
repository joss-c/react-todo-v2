{"version":3,"sources":["functions.js","randomMessage.js","thenBy.min.js","Stats.js","Calendar.js","CatGif.js","CustomModal.js","Shop.js","AddTask.js","Priority.js","List.js","Settings.js","TaskText.js","TaskDetails.js","TaskButtons.js","TaskEditBox.js","Tags.js","Task.js","ToDo.js","App.js","serviceWorker.js","index.js"],"names":["convertDate","date","convertTo","ISODate","Date","toISOString","substring","getTime","year","month","day","setUTCFullYear","setUTCMonth","setUTCDate","toLocaleDateString","getDate","time","todayISO","now","articulateDateDue","dateDue","today","arrayMove","arr","fromIndex","toIndex","arrCopy","slice","element","length","splice","randomMessage","messages","Math","floor","random","firstBy","identity","v","ignoreCase","toLowerCase","tb","func","opt","x","this","y","f","direction","prop","v1","uf","preprocess","cmp","v2","makeCompareFunction","a","b","thenBy","Stats","_ref","stats","tasksCompleted","totalTasksCompleted","Object","keys","oneWeekAgo","totalTasksCompletedOneWeek","reduce","total","id","timeCompleted","react_default","createElement","className","bonusStars","starsUsed","concat","Calendar","handleOnChange","value","Fragment","reactstrap_es","onChange","type","min","max","CatGif","_Component","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSave","kitty","saveKitty","setState","saveButtonClicked","state","loading","inherits","createClass","key","_this2","axios","method","url","headers","x-api-key","timeout","then","response","gif","data","console","log","catch","error","alert","_this3","_this$state","react_spinners","color","sizeUnit","size","body","style","width","src","alt","onClick","Component","CustomModal","isOpen","modalType","header","toggleModal","toggle","children","Shop","buyGif","stars","showGif","buttonDisabled","deductStars","toggleSavedKitties","savedKitties","toggleInnerModal","innerModal","currentCatGif","_this$props","inventory","totalStars","CustomModal_CustomModal","xs","offset","disabled","CatGif_CatGif","catGifs","map","index","AddTask","createItem","event","tasks","selectedPriority","addItem","convertPriority","selectedDate","selectedTag","inputElementValue","inputElement","current","itemInstances","task","text","active","uuid","hidden","priority","timeCreated","instance","editPanelHidden","settingsHidden","tag","preventDefault","React","createRef","_this$props2","inputChange","onSubmit","innerRef","placeholder","outline","Priority","List","Settings","settings","selectedStyle","changeStyle","changeColor","toggleInactiveTasks","colorHigh","colorMedium","colorLow","Settings_this","label","checked","hideInactive","TaskText","toggleEditItem","handleTextChange","editText","backgroundColor","textDecorationLine","lib_default","stopPropagation","defaultValue","TaskDetails","react_transition_group","in","classNames","TaskButtons","markComplete","sortItems","TaskEditBox","Tags","tags","changeTag","addTag","removeTag","showButtons","Task","TaskText_TaskText","TaskDetails_TaskDetails","TaskButtons_TaskButtons","TaskEditBox_TaskEditBox","Calendar_Calendar","editDate","Priority_Priority","editPriority","Tags_Tags","editTaskTag","ToDo","clone","object","JSON","parse","stringify","newItem","selectedSort","toConsumableArray","sortItemsBy","undo","setTimeout","notify","notifyStyle","background","deleteItem","err","filter","item","changePriority","target","newDate","toggleItems","tasksCopy","forEach","moveFrom","showAll","moveTo","sort","manual","selectSortBy","targetTask","targetPanelState","editTaskText","changeDate","updateDate","selectedColor","styles","newTag","prompt","includes","currentText","hideEditPanels","modals","push","font","settingsModal","statsModal","shopModal","createShowQueue","Default","Marie","Halloween","prevProps","prevState","saveData","prevTasksCompleted","revisedStats","_this$state2","document","notify_default","sm","md","lg","xl","AddTask_AddTask","List_List","Task_Task","Settings_Settings","Stats_Stats","Shop_Shop","defaultProps","App","localStorage","getItem","src_ToDo","fileName","setItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79acbed0.chunk.js","sourcesContent":["const convertDate = (date, convertTo) => {\r\n    const ISODate = new Date(date).toISOString().substring(0, 10)\r\n    if (convertTo === 'ISO') {\r\n        return ISODate\r\n    } else if (convertTo === 'timestamp') {\r\n        return new Date(date).getTime()\r\n    } else if (convertTo === 'local') {\r\n        const year = ISODate.substring(0, 4)\r\n        const month = ISODate.substring(5, 7)\r\n        const day = ISODate.substring(8, 10)\r\n        const date = new Date()\r\n        date.setUTCFullYear(year)\r\n        date.setUTCMonth(month - 1)\r\n        date.setUTCDate(day)\r\n        return date.toLocaleDateString('en-GB')\r\n    }\r\n}\r\n\r\nconst getDate = (time) => {\r\n    if (time === 'today') {\r\n        const todayISO = convertDate(Date.now(), 'ISO')\r\n        const todayTimestamp = convertDate(todayISO, 'timestamp')\r\n        return todayTimestamp\r\n    }\r\n}\r\n\r\nconst articulateDateDue = (dateDue) => {\r\n    let today = convertDate(Date.now(), 'ISO')\r\n    today = convertDate(today, 'timestamp')\r\n    if (dateDue - today < 0) {\r\n        return \"Overdue\"\r\n    }\r\n    if (dateDue - today === 0) {\r\n        return \"Today\"\r\n    } else if (dateDue - today === 86400000) {\r\n        return \"Tomorrow\"\r\n    } else {\r\n        return convertDate(dateDue, 'local')\r\n    }\r\n}\r\n\r\nconst arrayMove = (arr, fromIndex, toIndex) => {\r\n    const arrCopy = arr.slice(0)\r\n    const element = arr[fromIndex]\r\n    if (fromIndex === 0) {\r\n        toIndex = arr.length\r\n    }\r\n    arrCopy.splice(fromIndex, 1)\r\n    arrCopy.splice(toIndex, 0, element)\r\n    return arrCopy\r\n}\r\n\r\nexport { convertDate, getDate, articulateDateDue, arrayMove }","const randomMessage = () => {\r\n    const messages = [\r\n        \"Great job! 👍\",\r\n        \"Nice! 👌\",\r\n        \"You're doing so great!\",\r\n        \"You're on a roll!\",\r\n        \"We're doing it! 😁\",\r\n        \"Weow! 😺\",\r\n        \"A++ for effort!✨\",\r\n        \"Cool 😎\",\r\n        \"Amazing! 😄\",\r\n        \"Impressive 😎\",\r\n        \"Incredible! 👏\",\r\n        \"Nice moves! 🕺\",\r\n        \"Making progress! 😊\"\r\n    ]\r\n    return messages[Math.floor(Math.random() * messages.length)]\r\n}\r\n\r\nexport { randomMessage }","/***\r\n   Copyright 2013 Teun Duynstee\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n     http://www.apache.org/licenses/LICENSE-2.0\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\nvar firstBy = (function() {\r\n\r\n    function identity(v){return v;}\r\n\r\n    function ignoreCase(v){return typeof(v)===\"string\" ? v.toLowerCase() : v;}\r\n\r\n    function makeCompareFunction(f, opt){\r\n        opt = typeof(opt)===\"number\" ? {direction:opt} : opt||{};\r\n        if(typeof(f)!=\"function\"){\r\n            var prop = f;\r\n            // make unary function\r\n            f = function(v1){return !!v1[prop] ? v1[prop] : \"\";}\r\n        }\r\n        if(f.length === 1) {\r\n            // f is a unary function mapping a single item to its sort score\r\n            var uf = f;\r\n            var preprocess = opt.ignoreCase?ignoreCase:identity;\r\n            var cmp = opt.cmp || function(v1,v2) {return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;}\r\n            f = function(v1,v2) {return cmp(preprocess(uf(v1)), preprocess(uf(v2)));}\r\n        }\r\n        if(opt.direction === -1) return function(v1,v2){return -f(v1,v2)};\r\n        return f;\r\n    }\r\n\r\n    /* adds a secondary compare function to the target function (`this` context)\r\n       which is applied in case the first one returns 0 (equal)\r\n       returns a new compare function, which has a `thenBy` method as well */\r\n    function tb(func, opt) {\r\n        /* should get value false for the first call. This can be done by calling the \r\n        exported function, or the firstBy property on it (for es6 module compatibility)\r\n        */\r\n        var x = (typeof(this) == \"function\" && !this.firstBy) ? this : false;\r\n        var y = makeCompareFunction(func, opt);\r\n        var f = x ? function(a, b) {\r\n                        return x(a,b) || y(a,b);\r\n                    }\r\n                  : y;\r\n        f.thenBy = tb;\r\n        return f;\r\n    }\r\n    tb.firstBy = tb;\r\n    return tb;\r\n})();\r\n\r\nexport { firstBy }","import React from 'react'\r\n\r\nexport const Stats = ({ stats }) => {\r\n    const tasksCompleted = stats.tasksCompleted\r\n    const totalTasksCompleted = Object.keys(tasksCompleted).length\r\n    const oneWeekAgo = Date.now() - (60 * 60 * 24 * 7 * 1000)\r\n    const totalTasksCompletedOneWeek = Object.keys(tasksCompleted)\r\n        .reduce((total, id) => {\r\n            if (tasksCompleted[id].timeCompleted > oneWeekAgo) {\r\n                total++\r\n            }\r\n            return total\r\n        }, 0)\r\n    return (\r\n        <div className='align-center'>\r\n            <div className='star-big'>\r\n                {\"★\"}\r\n            </div>\r\n            <h1>{\"Stars: \"}<span className=\"special-text\">{totalTasksCompleted + stats.bonusStars - stats.starsUsed}</span></h1>\r\n            <div>\r\n                {`Tasks completed: ${totalTasksCompleted}`}\r\n            </div>\r\n            <div>\r\n                {`This week: ${totalTasksCompletedOneWeek}`}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Input } from 'reactstrap'\r\n\r\nexport const Calendar = ({ handleOnChange, value, convertDate }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Input \r\n                className='calendar-element'\r\n                onChange={handleOnChange} type='date'\r\n                value={value}\r\n                min={convertDate(Date.now(), 'ISO')}\r\n                max='2019-12-31'\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Button, Card } from 'reactstrap'\r\nimport { ClipLoader } from 'react-spinners'\r\n\r\nexport class CatGif extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { \r\n            loading: true,\r\n            saveButtonClicked: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios({\r\n            method: 'get',\r\n            url: 'https://api.thecatapi.com/v1/images/search?limit=1&mime_types=gif&format=json&order=RANDOM',\r\n            headers: { 'x-api-key': 'f5568fae-d85b-4310-8e88-cb282e0e2bac' },\r\n            timeout: 20000 \r\n        })\r\n            .then(response => {\r\n                const gif = response.data\r\n                console.log(gif[0].url)\r\n                this.setState({\r\n                    loading: false,\r\n                    gif\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n\r\n    handleSave = (kitty) => {\r\n        this.props.saveKitty(kitty)\r\n        this.setState({ saveButtonClicked: true })\r\n    }\r\n\r\n    render() {\r\n        const { loading, gif, saveButtonClicked } = this.state\r\n        return (\r\n            (loading) ?\r\n                <div className='align-center'>\r\n                    <ClipLoader\r\n                        color='#007bff'\r\n                        sizeUnit='px'\r\n                        size={50}\r\n                        loading={loading}\r\n                    />\r\n                </div>\r\n                :\r\n                <Card body className=\"text-center\">\r\n                    <div className='align-center'>\r\n                        <img\r\n                            style={{ width: '260px' }}\r\n                            src={gif[0].url}\r\n                            alt=\"This should be a cat gif...\"\r\n                        />\r\n                    </div>\r\n                    <p></p>\r\n                    <Button\r\n                        onClick={() => this.handleSave(gif[0].url)}\r\n                        color={(saveButtonClicked) ? \"success\" : \"info\"}\r\n                    >\r\n                        {(saveButtonClicked) ? \"Saved!\" : \"Save Kitty\"}\r\n                    </Button>\r\n                </Card>\r\n\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nexport const CustomModal = (props) => {\r\n    const { className, isOpen, modalType, header, toggleModal } = props\r\n    return (\r\n        <Modal\r\n            isOpen={isOpen}\r\n            toggle={() => toggleModal(modalType)}\r\n        >\r\n            <ModalHeader toggle={() => toggleModal(modalType)}>\r\n                {header}\r\n            </ModalHeader>\r\n            <ModalBody className={className}>\r\n                {props.children}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    color='primary'\r\n                    onClick={() => toggleModal(modalType)}\r\n                >\r\n                    {\"OK\"}\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport { Row, Col, Button, Badge, Collapse, Card } from 'reactstrap'\r\nimport { CatGif } from './CatGif'\r\nimport { CustomModal } from './CustomModal'\r\n\r\nexport class Shop extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            showGif: false,\r\n            buttonDisabled: false,\r\n            savedKitties: false,\r\n            innerModal: false,\r\n            currentCatGif: ''\r\n        }\r\n    }\r\n\r\n    buyGif = (stars) => {\r\n        this.setState({\r\n            showGif: true,\r\n            buttonDisabled: true\r\n        })\r\n        this.props.deductStars(stars)\r\n    }\r\n\r\n    toggleSavedKitties = () => {\r\n        this.setState({ savedKitties: !this.state.savedKitties })\r\n    }\r\n\r\n    toggleInnerModal = (gif) => {\r\n        this.setState({\r\n            innerModal: !this.state.innerModal,\r\n            currentCatGif: gif\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { stats, inventory, saveKitty } = this.props\r\n        const { buttonDisabled, savedKitties, innerModal, currentCatGif } = this.state\r\n        const totalStars = Object.keys(stats.tasksCompleted).length + stats.bonusStars - stats.starsUsed\r\n        return (\r\n            <React.Fragment>\r\n                <CustomModal\r\n                    isOpen={innerModal}\r\n                    toggleModal={this.toggleInnerModal}\r\n                >\r\n                    <img\r\n                        style={{ width: '100%' }}\r\n                        src={currentCatGif}\r\n                        alt=\"This should be a cat gif..\"\r\n                    >\r\n                    </img>\r\n                </CustomModal>\r\n                <Row>\r\n                    <Col xs={{ offset: 8 }}>\r\n                        <h4>\r\n                            {\"Stars \"}<Badge color='primary'>{totalStars}</Badge>\r\n                        </h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='margin-top-10'>\r\n                    <Col\r\n                        className='grey-background extra-padding curved-border'\r\n                        xs={{ size: 10, offset: 1 }}\r\n                    >\r\n                        <span className='shop-items'>\r\n                            {\"1 x Cat Gif: \"}\r\n                        </span>\r\n                        <Button\r\n                            className='buy-button'\r\n                            color='warning'\r\n                            disabled={buttonDisabled || totalStars < 2}\r\n                            onClick={() => this.buyGif(2)}\r\n                        >\r\n                            {'⭐2'}\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <div className='cat-gif'>\r\n                    {(!this.state.showGif) ? null :\r\n                        <CatGif saveKitty={saveKitty} />}\r\n                </div>\r\n                <Row>\r\n                    <Col xs={{ offset: 2 }}>\r\n                        <p></p>\r\n                        <Button\r\n                            onClick={this.toggleSavedKitties}\r\n                        >\r\n                            {\"Saved Kitties\"}\r\n                        </Button>\r\n                        <Collapse isOpen={savedKitties}>\r\n                            {inventory.catGifs.map((gif, index) =>\r\n                                <div key={index}>\r\n                                    <Card>\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <span>{`Kitty ${index + 1}`}</span>\r\n                                                <Button\r\n                                                    id='Popover'\r\n                                                    color='link'\r\n                                                    onClick={() => this.toggleInnerModal(gif)}\r\n                                                >\r\n                                                    {\"View\"}\r\n                                                </Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Card>\r\n                                </div>\r\n                            )}\r\n                        </Collapse>\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport uuid from 'uuid'\r\nimport { Row, Col, Input, Button, Form, FormGroup } from 'reactstrap'\r\n\r\nexport class AddTask extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputElement = React.createRef()\r\n    }\r\n    createItem = (event) => {\r\n        const { \r\n            tasks,\r\n            selectedPriority,\r\n            addItem,\r\n            convertPriority,\r\n            convertDate,\r\n            selectedDate,\r\n            selectedTag\r\n        } = this.props\r\n        const inputElementValue = this.inputElement.current.value\r\n        const itemInstances = tasks.reduce(function (total, task) {\r\n            return total + (inputElementValue === task.text ? 1 : 0)\r\n        }, 1)\r\n        const newItem = {\r\n            active: true,\r\n            id: uuid().substring(0, 12),\r\n            hidden: false,\r\n            text: inputElementValue,\r\n            priority: convertPriority(selectedPriority),\r\n            timeCreated: Date.now(),\r\n            dateDue: convertDate(selectedDate, 'timestamp'),\r\n            instance: itemInstances,\r\n            editPanelHidden: true,\r\n            settingsHidden: true,\r\n            tag: (selectedTag === 'None') ? 'None' : selectedTag,\r\n        }\r\n        addItem(newItem)\r\n        this.inputElement.current.value = \"\"\r\n        event.preventDefault()\r\n    }\r\n    render() {\r\n        const { inputChange, buttonDisabled } = this.props\r\n        return (\r\n            <Form onSubmit={this.createItem}>\r\n                <FormGroup>\r\n                    <Row className='row-0 no-gutters'>\r\n                        <Col className='padding-right' xs='9'>\r\n                            <Input \r\n                                type='text'\r\n                                className='input--add-task'\r\n                                onChange={inputChange}\r\n                                innerRef={this.inputElement}\r\n                                placeholder='Enter Task'>\r\n                            </Input>\r\n                        </Col>\r\n                        <Col xs='3'>\r\n                            <Button\r\n                                className='add-button'\r\n                                outline color='primary'\r\n                                disabled={buttonDisabled}\r\n                                type='submit'\r\n                            >\r\n                                {\"Add\"}\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Input } from 'reactstrap'\r\n\r\nexport const Priority = ({ handleOnChange, value }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Input\r\n                type='select'\r\n                className='priority-element'\r\n                value={value}\r\n                onChange={handleOnChange}\r\n            >\r\n                <option value='Low'>Priority: Low</option>\r\n                <option value='Medium'>Medium</option>\r\n                <option value='High'>High</option>\r\n            </Input>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const List = (props) => {\r\n    return (\r\n        <div className='list'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Row, Col, Input, CustomInput } from 'reactstrap'\r\n\r\nexport const Settings = ({ settings, selectedStyle, changeStyle, changeColor, toggleInactiveTasks }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <fieldset>\r\n                <div>\r\n                    <legend>Choose your colours</legend>\r\n                    <div>\r\n                        <Input\r\n                            className='select-style'\r\n                            type='select'\r\n                            value={selectedStyle}\r\n                            onChange={changeStyle}>\r\n                            <option value='None'>None</option>\r\n                            <option value='Default'>Default</option>\r\n                            <option value='Marie'>Marie</option>\r\n                            <option value='Halloween'>Halloween</option>\r\n                        </Input>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='change-color'\r\n                            type='color'\r\n                            value={settings.style.colorHigh}\r\n                            onChange={(event) => changeColor(event, 'colorHigh')}>\r\n                        </input>\r\n                        <label>High Priority</label>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='change-color'\r\n                            type='color'\r\n                            value={settings.style.colorMedium}\r\n                            onChange={(event) => changeColor(event, 'colorMedium')}>\r\n                        </input>\r\n                        <label>Medium Priority</label>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='change-color'\r\n                            type='color'\r\n                            value={settings.style.colorLow}\r\n                            onChange={(event) => this.changeColor(event, 'colorLow')}>\r\n                        </input>\r\n                        <label>Low Priority</label>\r\n                    </div>\r\n                </div>\r\n                <React.Fragment>\r\n                    <div>-----------</div>\r\n                    <Row>\r\n                        <Col>\r\n                            <CustomInput\r\n                                type='checkbox'\r\n                                id='checkbox'\r\n                                label='Show completed tasks'\r\n                                checked={!settings.hideInactive}\r\n                                onChange={toggleInactiveTasks} />\r\n                        </Col>\r\n                    </Row>\r\n                    <div>-----------</div>\r\n                </React.Fragment>\r\n            </fieldset>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport TextareaAutosize from 'react-autosize-textarea'\r\nimport { Row, Col, Button } from 'reactstrap'\r\n\r\nexport const TaskText = ({ settings, task, index, toggleEditItem, handleTextChange, editText, children }) => {\r\n    return (\r\n        <div\r\n            className={(task.active) ? 'task' : 'task animate-background'}\r\n            onClick={() => toggleEditItem(index)}\r\n            style={{\r\n                backgroundColor: (!task.active) ?\r\n                    '#e5e5e5' :\r\n                    (task.priority === 3) ?\r\n                        settings.style.colorLow :\r\n                        (task.priority === 2) ?\r\n                            settings.style.colorMedium :\r\n                            settings.style.colorHigh\r\n            }}\r\n        >\r\n            <span \r\n                style={{\r\n                textDecorationLine: (task.active) ?\r\n                    'none' :\r\n                    'line-through'\r\n                }}\r\n            >\r\n                {(task.editPanelHidden) ?\r\n                    <Row>\r\n                        <Col>\r\n                            {task.text}\r\n                            <span className='instance'>\r\n                                {(task.instance > 1) ?\r\n                                    ` (${task.instance})` :\r\n                                    null}\r\n                            </span>\r\n                        </Col>\r\n                    </Row> :\r\n                    <span>\r\n                        <Row className='edit-text no-gutters'>\r\n                            <Col xs='10'>\r\n                                <TextareaAutosize\r\n                                    className='edit-text-element'\r\n                                    onChange={(event) => handleTextChange(event)}\r\n                                    onClick={(event) => event.stopPropagation()}\r\n                                    defaultValue={task.text}\r\n                                />\r\n                            </Col>\r\n                            <Col xs='2'>\r\n                                <Button\r\n                                    className='edit-text-button'\r\n                                    color='secondary'\r\n                                    size='sm'\r\n                                    onClick={(event) => editText(event, index)}\r\n                                >\r\n                                    {\"OK\"}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </span>}\r\n            </span>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { Row, Col } from 'reactstrap'\r\n\r\nexport const TaskDetails = ({ task, articulateDateDue }) => \r\n    <Row>\r\n        <Col className='task-details'>\r\n            <TransitionGroup>\r\n                <div className='date-due x-small'>\r\n                    {(task.tag === 'None') ?\r\n                        null :\r\n                        <span className='tag'>{task.tag}</span>}\r\n                    {(task.active) ?\r\n                        `Due: ${articulateDateDue(task.dateDue)}` :\r\n                        <React.Fragment>\r\n                            <span className='x-small'>\r\n                                {\"Complete \"}\r\n                            </span>\r\n                            <CSSTransition\r\n                                in={!task.active}\r\n                                timeout={1000}\r\n                                classNames='star'\r\n                            >\r\n                                <span className='star x-small'>\r\n                                    {\"★\"}\r\n                                </span>\r\n                            </CSSTransition>\r\n                            <CSSTransition\r\n                                in={!task.active}\r\n                                timeout={1000}\r\n                                classNames='plus-one'\r\n                            >\r\n                                <span className='plus-one x-small'>\r\n                                    {\" +1\"}\r\n                                </span>\r\n                            </CSSTransition>\r\n                        </React.Fragment>}\r\n                </div>\r\n            </TransitionGroup>\r\n        </Col>\r\n    </Row>","import React from 'react'\r\nimport { Button } from 'reactstrap'\r\n\r\nexport const TaskButtons = ({ task, index, markComplete, sortItems }) => {\r\n    return (\r\n        <div className='item-buttons'>\r\n            <Button\r\n                className='sort-button'\r\n                size='sm'\r\n                outline color='secondary'\r\n                onClick={() => sortItems(index, true)}\r\n            >\r\n                {\"↑\"}\r\n            </Button>\r\n            <Button\r\n                className='delete-item-button'\r\n                size='sm'\r\n                outline\r\n                color={(task.active) ? 'success' : 'danger'}\r\n                onClick={() => markComplete(index)}\r\n            >\r\n                {(task.active) ? \"✓\" : \"✕\"}\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Button } from 'reactstrap'\r\n\r\nexport const TaskEditBox = ({ task, index, markComplete, children }) => {\r\n    return (\r\n        <div className='edit-task' hidden={task.editPanelHidden}>\r\n            <span hidden={!task.active}>\r\n                {children}\r\n            </span>\r\n            <div className='undo'>\r\n                <Button \r\n                    hidden={task.active}\r\n                    className='undo-button'\r\n                    outline\r\n                    color='secondary'\r\n                    onClick={() => markComplete(index, true)}\r\n                >\r\n                    {`Undo \"Mark Complete\"`}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Input, Button } from 'reactstrap'\r\n\r\nexport const Tags = (props) => {\r\n    const { tags, selectedTag, changeTag, addTag, removeTag, showButtons } = props\r\n    return (\r\n        <React.Fragment>\r\n            <Input \r\n                type='select'\r\n                className='select-tag'\r\n                value={selectedTag}\r\n                onChange={changeTag}\r\n            >\r\n                {tags.map((tag, index) => <option key={index} value={tag}>\r\n                    {(tag === 'None') ? 'Tag: None' : tag}\r\n                </option>)}\r\n            </Input>\r\n            {(!showButtons) ? null :\r\n                <React.Fragment>\r\n                    <Button\r\n                        outline\r\n                        color='secondary'\r\n                        size='sm'\r\n                        onClick={removeTag}\r\n                    >\r\n                        {\"-\"}\r\n                    </Button>\r\n                    <Button\r\n                        outline\r\n                        color='secondary'\r\n                        size='sm'\r\n                        onClick={addTag}\r\n                    >\r\n                        {\"+\"}\r\n                    </Button>\r\n                </React.Fragment>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { Row, Col } from 'reactstrap'\r\nimport { TaskText } from './TaskText'\r\nimport { TaskDetails } from './TaskDetails'\r\nimport { TaskButtons } from './TaskButtons'\r\nimport { TaskEditBox } from './TaskEditBox'\r\nimport { Calendar } from './Calendar'\r\nimport { Priority } from './Priority'\r\nimport { Tags } from './Tags'\r\n\r\nexport const Task = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Row className='no-gutters'>\r\n                <Col xs='9'>\r\n                    <TaskText\r\n                        settings={props.settings}\r\n                        task={props.task}\r\n                        index={props.index}\r\n                        handleTextChange={props.handleTextChange}\r\n                        editText={props.editText}\r\n                        toggleEditItem={props.toggleEditItem}\r\n                    >\r\n                        <TaskDetails\r\n                            task={props.task}\r\n                            articulateDateDue={props.articulateDateDue}\r\n                        />\r\n                    </TaskText>\r\n                </Col>\r\n                <Col xs='3'>\r\n                    <TransitionGroup>\r\n                        <CSSTransition\r\n                            key={props.task.id}\r\n                            timeout={500}\r\n                            classNames='fade'>\r\n                            <TaskButtons\r\n                                task={props.task}\r\n                                index={props.index}\r\n                                markComplete={props.markComplete}\r\n                                sortItems={props.sortItems}\r\n                            />\r\n                        </CSSTransition>\r\n                    </TransitionGroup>\r\n                </Col>\r\n            </Row>\r\n            <TaskEditBox\r\n                task={props.task}\r\n                index={props.index}\r\n                markComplete={props.markComplete}>\r\n                <Row>\r\n                    <Col>\r\n                        <Calendar\r\n                            value={props.convertDate(props.task.dateDue, 'ISO')}\r\n                            handleOnChange={(event) => props.editDate(event, props.index)}\r\n                            convertDate={props.convertDate}\r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <Priority\r\n                            value={props.convertPriority(props.task.priority)}\r\n                            handleOnChange={(event) => props.editPriority(event, props.index)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className='margin-top-2'>\r\n                    <Col xs={{ size: 6, offset: 6 }}>\r\n                        <Tags\r\n                            tags={props.tags}\r\n                            index={props.index}\r\n                            selectedTag={props.task.tag}\r\n                            changeTag={(event) => props.editTaskTag(event, props.index)}\r\n                            addTag={props.addTag}\r\n                            removeTag={props.removeTag}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </TaskEditBox>\r\n        </React.Fragment>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport Notifications, { notify } from 'react-notify-toast'\r\nimport uuid from 'uuid'\r\nimport { convertDate, getDate, articulateDateDue, arrayMove } from './functions'\r\nimport { randomMessage } from './randomMessage'\r\nimport { firstBy } from './thenBy.min.js'\r\nimport { Container, Row, Col, Input, Button } from 'reactstrap'\r\nimport { Stats } from './Stats'\r\nimport { Calendar } from './Calendar'\r\nimport { Shop } from './Shop'\r\nimport { AddTask } from './AddTask'\r\nimport { CustomModal } from './CustomModal'\r\nimport { Priority } from './Priority'\r\nimport { List } from './List'\r\nimport { Settings } from './Settings'\r\nimport { Task } from './Task'\r\nimport { Tags } from './Tags'\r\n\r\nclass ToDo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            tasks: (this.props.tasks) ? JSON.parse(this.props.tasks) :\r\n                [{\r\n                    active: true,\r\n                    hidden: false,\r\n                    id: uuid().substring(0, 10),\r\n                    text: \"Sample Task ✨\",\r\n                    priority: 3,\r\n                    time: Date.now(),\r\n                    instance: 1,\r\n                    editPanelHidden: true,\r\n                    dateDue: getDate('today'),\r\n                    tag: 'None'\r\n                }],\r\n            inventory: (this.props.inventory) ? JSON.parse(this.props.inventory) :\r\n                {\r\n                    catGifs: []\r\n                },\r\n            settings: (this.props.settings) ? JSON.parse(this.props.settings) :\r\n                {\r\n                    style: {\r\n                        colorHigh: '#f5c6cb',\r\n                        colorMedium: '#ffeeba',\r\n                        colorLow: '#bee5eb',\r\n                        backgroundColor: '#ffffff',\r\n                        font: ''\r\n                    },\r\n                    hideInactive: false\r\n                },\r\n            stats: (this.props.stats) ? JSON.parse(this.props.stats) :\r\n                {\r\n                    tasksCompleted: {},\r\n                    bonusStars: 0,\r\n                    starsUsed: 0,\r\n                },\r\n            modals: {\r\n                settingsModal: false,\r\n                statsModal: false,\r\n                shopModal: false\r\n            },\r\n            tags: (this.props.tags) ? JSON.parse(this.props.tags) : ['None'],\r\n            buttonDisabled: true,\r\n            selectedPriority: 'Low',\r\n            selectedSort: 'None',\r\n            selectedDate: this.props.convertDate(Date.now(), 'ISO'),\r\n            selectedStyle: 'None',\r\n            selectedTag: 'None',\r\n            editTaskText: '',\r\n        }\r\n        this.selectSortBy = React.createRef()\r\n        this.notify = notify.createShowQueue()\r\n        this.styles = {\r\n            Default: ['#bee5eb', '#ffeeba', '#f5c6cb', '#ffffff'],\r\n            Marie: ['#fce8f7', '#f2b5e2', '#f46ed0', '#ffffff'],\r\n            Halloween: ['#feeeb8', '#ffa100', '#e76427', '#000000']\r\n        }\r\n        this.notifyStyle = { background: '#007bff', text: '#ffffff' }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { tasks, inventory, settings, stats, tags } = this.state\r\n        const { saveData } = this.props\r\n        console.log(this.state)\r\n        if (prevState.tasks !== tasks) {\r\n            saveData(tasks, 'tasks')\r\n        }\r\n        if (prevState.inventory !== inventory) {\r\n            saveData(inventory, 'inventory')\r\n        }\r\n        if (prevState.settings !== settings) {\r\n            saveData(settings, 'settings')\r\n        }\r\n        if (prevState.stats !== stats) {\r\n            saveData(stats, 'stats_5')\r\n        }\r\n        if (prevState.tags !== tags) {\r\n            saveData(tags, 'tags_2')\r\n        }\r\n        // Uncredit bonus stars on 'mark uncomplete'\r\n        const prevTasksCompleted = Object.keys(prevState.stats.tasksCompleted).length\r\n        const tasksCompleted = Object.keys(stats.tasksCompleted).length\r\n        if (tasksCompleted < prevTasksCompleted) {\r\n            if (prevTasksCompleted % 10 === 0) {\r\n                let revisedStats = this.clone(stats)\r\n                revisedStats.bonusStars -= 2\r\n                console.log(\"Stars are being removed..\")\r\n                this.setState({ stats: revisedStats })\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.hideEditPanels()\r\n        this.sortItems()\r\n        console.log(this.state)\r\n        this.notify(\"You got this! 😊\", 'custom', 2000, this.notifyStyle)\r\n    }\r\n\r\n    clone = (object) => {\r\n        return JSON.parse(JSON.stringify(object))\r\n    }\r\n\r\n    addItem = (newItem) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks = [...tasks, newItem]\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({\r\n            tasks: tasks,\r\n            buttonDisabled: true\r\n        })\r\n    }\r\n\r\n    markComplete = (index, undo) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        let stats = this.clone(this.state.stats)\r\n        const task = tasks[index]\r\n        if (tasks.length === 0) {\r\n            console.log('List is empty')\r\n        } else {\r\n            try {\r\n                const itemIsActive = task.active\r\n                if (itemIsActive) {\r\n                    task.active = false\r\n                    stats.tasksCompleted[task.id] = {\r\n                        timeCreated: task.timeCreated,\r\n                        timeCompleted: Date.now()\r\n                    }\r\n                    if (this.state.settings.hideInactive) {\r\n                        tasks = this.sortItemsBy(tasks, 'active')\r\n                    }\r\n                    this.setState({\r\n                        tasks: tasks,\r\n                        stats: stats\r\n                    })\r\n                    // Stars stuff\r\n                    const tasksCompleted = Object.keys(stats.tasksCompleted).length\r\n                    if (tasksCompleted % 5 === 0) {\r\n                        setTimeout(() => {\r\n                            this.notify(randomMessage(), 'custom', 2000, this.notifyStyle)\r\n                        }, 500)\r\n                    }\r\n                    if (tasksCompleted % 10 === 0) {\r\n                        setTimeout(() => {\r\n                            this.notify('⭐+2 STARS BONUS⭐', 'custom', 2000, { background: '#fff5be', text: '#000000' })\r\n                            stats.bonusStars += 2\r\n                            this.setState({ stats: stats })\r\n                        }, 500)\r\n                    }\r\n                } else if (undo) {\r\n                    task.editPanelHidden = true\r\n                    task.active = true\r\n                    delete stats.tasksCompleted[task.id]\r\n                    this.setState({\r\n                        tasks: tasks,\r\n                        stats: stats\r\n                    })\r\n                } else {\r\n                    this.deleteItem(index)\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteItem = (key) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks = tasks.filter((item, index) =>\r\n            index !== key\r\n        )\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    changePriority = (event) => {\r\n        const selectedPriority = event.target.value\r\n        this.setState({ selectedPriority: selectedPriority })\r\n    }\r\n\r\n    convertPriority = (priority) => {\r\n        if (typeof priority === 'string') {\r\n            return (priority === 'Low') ? 3\r\n                : (priority === 'Medium') ? 2\r\n                    : 1\r\n        } else {\r\n            return (priority === 3) ? 'Low'\r\n                : (priority === 2) ? 'Medium'\r\n                    : 'High'\r\n        }\r\n    }\r\n\r\n    editPriority = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const task = tasks[index]\r\n        const selectedPriority = event.target.value\r\n        task.priority = this.convertPriority(selectedPriority)\r\n        task.editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    editDate = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const newDate = event.target.value\r\n        tasks[index].dateDue = convertDate(newDate, 'timestamp')\r\n        tasks[index].editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    inputChange = (event) => {\r\n        const currentText = event.target.value\r\n        if (currentText === '') {\r\n            this.setState({ buttonDisabled: true })\r\n        } else {\r\n            this.setState({ buttonDisabled: false })\r\n        }\r\n    }\r\n\r\n    toggleItems = (tasks, type, tag) => {\r\n        let tasksCopy = this.clone(tasks)\r\n        if (type === 'selected tag') {\r\n            tasksCopy.forEach(task => (task.tag !== tag || task.tag === 'None') && (task.hidden = true))\r\n        } else if (type === 'tags only') {\r\n            tasksCopy.forEach(task => (task.tag === 'None') && (task.hidden = true))\r\n        } else if (type === 'show all') {\r\n            tasksCopy.forEach(task => (task.hidden === true) && (task.hidden = false))\r\n        }\r\n        return tasksCopy\r\n    }\r\n\r\n    sortItemsBy = (tasks, selectedSort, moveFrom) => {\r\n        const showAll = this.toggleItems(tasks, 'show all')\r\n        if (selectedSort === 'Manual') {\r\n            const moveTo = moveFrom - 1\r\n            return tasks = this.props.arrayMove(tasks, moveFrom, moveTo)\r\n            //return tasks.sort(firstBy('active', -1))\r\n        }\r\n        if (selectedSort === 'None') {\r\n            return showAll\r\n        } else if (selectedSort === 'Priority') {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy('active', -1)\r\n                    .thenBy('priority')\r\n                    .thenBy('dateDue')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'Date Due') {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy('active', -1)\r\n                    .thenBy('dateDue')\r\n                    .thenBy('priority')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'A-Z') {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy('active', -1)\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'Tags') {\r\n            tasks = showAll\r\n            tasks = this.toggleItems(tasks, 'tags only')\r\n            return tasks.sort(\r\n                firstBy('tag')\r\n                    .thenBy('priority')\r\n                    .thenBy('dateDue')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'Selected Tag') {\r\n            tasks = this.toggleItems(tasks, 'selected tag', this.state.selectedTag)\r\n            return tasks.sort(\r\n                firstBy('tag')\r\n                    .thenBy('priority')\r\n                    .thenBy('dateDue')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'active') {\r\n            return tasks.sort(firstBy('active', -1))\r\n        }\r\n    }\r\n\r\n    sortItems = (index, manual) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        const selectedSort = this.selectSortBy.current.value\r\n        if (manual) {\r\n            if (selectedSort === 'None') {\r\n                console.log(\"correct\")\r\n                tasks = this.sortItemsBy(tasks, 'Manual', index)\r\n                this.setState({ tasks: tasks })\r\n            } else {\r\n                tasks = this.sortItemsBy(tasks, 'Manual', index)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: 'None'\r\n                })\r\n            }\r\n        } else {\r\n            if (selectedSort === 'None') {\r\n                tasks = this.sortItemsBy(tasks, selectedSort)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: selectedSort\r\n                })\r\n            } else {\r\n                tasks = this.sortItemsBy(tasks, selectedSort)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: selectedSort\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleEditItem = (index) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        const targetTask = tasks[index]\r\n        const targetPanelState = targetTask.editPanelHidden\r\n        tasks.forEach((task) => {\r\n            if (task.editPanelHidden === false && task !== targetTask) {\r\n                task.editPanelHidden = true\r\n            }\r\n        })\r\n        tasks[index].editPanelHidden = !targetPanelState\r\n        this.setState({\r\n            tasks: tasks,\r\n            editTaskText: targetTask.text\r\n        })\r\n    }\r\n\r\n    changeDate = (event) => {\r\n        const updateDate = event.target.value\r\n        this.setState({ selectedDate: updateDate })\r\n    }\r\n\r\n    changeColor = (event, selectedColor) => {\r\n        let settings = this.clone(this.state.settings)\r\n        settings.style[selectedColor] = event.target.value\r\n        this.setState({\r\n            settings: settings,\r\n            selectedStyle: 'None'\r\n        })\r\n    }\r\n\r\n    changeStyle = (event) => {\r\n        let settings = this.clone(this.state.settings)\r\n        const selectedStyle = event.target.value\r\n        const style = settings.style\r\n        if (style === 'None') {\r\n            this.setState({ selectedStyle: selectedStyle })\r\n        } else {\r\n            style.colorLow = this.styles[selectedStyle][0]\r\n            style.colorMedium = this.styles[selectedStyle][1]\r\n            style.colorHigh = this.styles[selectedStyle][2]\r\n            style.backgroundColor = this.styles[selectedStyle][3]\r\n            this.setState({\r\n                settings: settings,\r\n                selectedStyle: selectedStyle\r\n            })\r\n        }\r\n    }\r\n\r\n    changeTag = (event) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const tag = event.target.value\r\n        if (selectedSort === 'Selected Tag') {\r\n            tasks = this.toggleItems(tasks, 'show all')\r\n            tasks = this.toggleItems(tasks, 'selected tag', tag)\r\n            this.setState({\r\n                tasks: tasks,\r\n                selectedTag: tag\r\n            })\r\n        } else {\r\n            this.setState({ selectedTag: tag })\r\n        }\r\n    }\r\n\r\n    addTag = () => {\r\n        let tags = this.clone(this.state.tags)\r\n        const newTag = prompt(\"Enter a new tag\")\r\n        if (newTag === '' || tags.includes(newTag)) {\r\n            alert(\"Invalid tag or duplicate\")\r\n        } else {\r\n            tags = [...tags, newTag]\r\n            this.setState({\r\n                tags: tags,\r\n                selectedTag: newTag\r\n            })\r\n        }\r\n    }\r\n\r\n    removeTag = () => {\r\n        const { selectedTag } = this.state\r\n        let tags = this.clone(this.state.tags)\r\n        tags = tags.filter(tag => tag !== selectedTag || tag === 'None')\r\n        this.setState({\r\n            tags: tags,\r\n            selectedTag: 'None'\r\n        })\r\n    }\r\n\r\n    editTaskTag = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        let task = tasks[index]\r\n        task.tag = event.target.value\r\n        task.editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    editText = (event, index) => {\r\n        event.stopPropagation()\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks[index].text = this.state.editTaskText\r\n        tasks[index].editPanelHidden = true\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    handleTextChange = (event) => {\r\n        const currentText = event.target.value\r\n        this.setState({ editTaskText: currentText })\r\n    }\r\n\r\n    hideEditPanels = () => {\r\n        const { tasks } = this.state\r\n        tasks.forEach(task => (task.editPanelHidden === false) && (task.editPanelHidden = true))\r\n    }\r\n\r\n    toggleInactiveTasks = () => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        let settings = this.clone(this.state.settings)\r\n        settings.hideInactive = !settings.hideInactive\r\n        tasks = this.sortItemsBy(tasks, 'active')\r\n        this.setState({\r\n            tasks: tasks,\r\n            settings: settings\r\n        })\r\n    }\r\n\r\n    toggleModal = (modalType) => {\r\n        let modals = this.clone(this.state.modals)\r\n        modals[modalType] = !modals[modalType]\r\n        this.setState({ modals: modals })\r\n    }\r\n\r\n    deductStars = (stars) => {\r\n        let stats = this.clone(this.state.stats)\r\n        stats.starsUsed += stars\r\n        this.setState({ stats: stats })\r\n    }\r\n\r\n    saveKitty = (kitty) => {\r\n        let inventory = this.clone(this.state.inventory)\r\n        inventory.catGifs.push(kitty)\r\n        this.setState({ inventory: inventory })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            tasks,\r\n            inventory,\r\n            settings,\r\n            stats,\r\n            tags,\r\n            buttonDisabled,\r\n            selectedPriority,\r\n            selectedDate,\r\n            selectedTag,\r\n            selectedSort,\r\n            selectedStyle,\r\n            modals\r\n        } = this.state\r\n        const {\r\n            convertDate,\r\n            articulateDateDue\r\n        } = this.props\r\n        document.body.style.backgroundColor = settings.style.backgroundColor\r\n        return (\r\n            <Container>\r\n                <Notifications />\r\n                <Row>\r\n                    <Col className='todo' sm='10' md='7' lg='5' xl='5'>\r\n                        <AddTask\r\n                            tasks={tasks}\r\n                            addItem={this.addItem}\r\n                            inputChange={this.inputChange}\r\n                            convertPriority={this.convertPriority}\r\n                            convertDate={convertDate}\r\n                            buttonDisabled={buttonDisabled}\r\n                            selectedPriority={selectedPriority}\r\n                            selectedDate={selectedDate}\r\n                            selectedTag={selectedTag} />\r\n                        <Row className='row-1 no-gutters'>\r\n                            <Col>\r\n                                <div className='calendar'>\r\n                                    <Calendar\r\n                                        value={selectedDate}\r\n                                        handleOnChange={this.changeDate}\r\n                                        convertDate={convertDate} />\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <div className='priority--top'>\r\n                                    <Priority\r\n                                        value={selectedPriority}\r\n                                        handleOnChange={this.changePriority} />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='row-2 no-gutters'>\r\n                            <Col\r\n                                className='sort padding-right'\r\n                                xs='5'>\r\n                                <Input\r\n                                    type='select'\r\n                                    className='select-sort'\r\n                                    value={selectedSort}\r\n                                    innerRef={this.selectSortBy}\r\n                                    onChange={this.sortItems}\r\n                                >\r\n                                    <option value='None'>Sort: None</option>\r\n                                    <option value='Priority'>Priority</option>\r\n                                    <option value='Date Due'>Date Due</option>\r\n                                    <option value='A-Z'>A-Z</option>\r\n                                    <option value='Tags'>Tags</option>\r\n                                    <option value='Selected Tag'>Selected Tag</option>\r\n                                </Input>\r\n                            </Col>\r\n                            <Col\r\n                                className='manage-tags'\r\n                                xs='7'\r\n                            >\r\n                                <Tags\r\n                                    tags={tags}\r\n                                    selectedTag={selectedTag}\r\n                                    changeTag={this.changeTag}\r\n                                    addTag={this.addTag}\r\n                                    removeTag={this.removeTag}\r\n                                    showButtons\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <List className='list'>\r\n                            <TransitionGroup>\r\n                                {tasks.map((task, index) =>\r\n                                    (task.hidden) ?\r\n                                        null :\r\n                                        (!task.active && settings.hideInactive) ?\r\n                                            null :\r\n                                            <CSSTransition\r\n                                                key={task.id}\r\n                                                timeout={500}\r\n                                                classNames='fade'\r\n                                            >\r\n                                                <Task\r\n                                                    tasks={tasks}\r\n                                                    settings={settings}\r\n                                                    task={task}\r\n                                                    index={index}\r\n                                                    handleTextChange={this.handleTextChange}\r\n                                                    editText={this.editText}\r\n                                                    toggleEditItem={this.toggleEditItem}\r\n                                                    articulateDateDue={articulateDateDue}\r\n                                                    markComplete={this.markComplete}\r\n                                                    sortItems={this.sortItems}\r\n                                                    convertPriority={this.convertPriority}\r\n                                                    editDate={this.editDate}\r\n                                                    convertDate={convertDate}\r\n                                                    editPriority={this.editPriority}\r\n                                                    tags={tags}\r\n                                                    editTaskTag={this.editTaskTag}\r\n                                                    addTag={this.addTag}\r\n                                                    removeTag={this.removeTag}\r\n                                                />\r\n                                            </CSSTransition>\r\n                                )}\r\n                            </TransitionGroup>\r\n                        </List>\r\n                        <Row className='row-3 no-gutters'>\r\n                            <Button\r\n                                className='settings-button'\r\n                                outline\r\n                                color='secondary'\r\n                                onClick={() => this.toggleModal('settingsModal')}\r\n                            >\r\n                                {\"⚙\"}\r\n                            </Button>\r\n                            <Button\r\n                                className='stats-button'\r\n                                outline\r\n                                color='secondary'\r\n                                onClick={() => this.toggleModal('statsModal')}\r\n                            >\r\n                                {\"⭐\"}\r\n                            </Button>\r\n                            <Button\r\n                                className='cat-button'\r\n                                outline\r\n                                color='secondary'\r\n                                onClick={() => this.toggleModal('shopModal')}\r\n                            >\r\n                                {\"🐱\"}\r\n                            </Button>\r\n                        </Row>\r\n                        <Row className='settings no-gutters'>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <CustomModal\r\n                    isOpen={modals.settingsModal}\r\n                    modalType='settingsModal'\r\n                    header=\"Settings\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Settings\r\n                        settings={settings}\r\n                        selectedStyle={selectedStyle}\r\n                        changeStyle={this.changeStyle}\r\n                        changeColor={this.changeColor}\r\n                        toggleInactiveTasks={this.toggleInactiveTasks}\r\n                    />\r\n                </CustomModal>\r\n                <CustomModal\r\n                    className='rainbow-background'\r\n                    isOpen={modals.statsModal}\r\n                    modalType='statsModal'\r\n                    header=\"Stats\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Stats\r\n                        stats={stats}\r\n                    />\r\n                </CustomModal>\r\n                <CustomModal\r\n                    isOpen={modals.shopModal}\r\n                    modalType='shopModal'\r\n                    header=\"Cat Gif Shop!\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <div className='align-center'>\r\n                        <Shop\r\n                            stats={stats}\r\n                            inventory={inventory}\r\n                            saveKitty={this.saveKitty}\r\n                            deductStars={this.deductStars}\r\n                        />\r\n                    </div>\r\n                </CustomModal>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nToDo.defaultProps = {\r\n    convertDate: convertDate,\r\n    getDate: getDate,\r\n    articulateDateDue: articulateDateDue,\r\n    arrayMove: arrayMove\r\n}\r\n\r\nexport default ToDo","import React, { Component } from 'react';\nimport { convertDate, articulateDateDue, arrayMove } from './functions'\nimport ToDo from './ToDo'\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        const tasks = localStorage.getItem('tasks')\n        const inventory = localStorage.getItem('inventory')\n        const settings = localStorage.getItem('settings')\n        const stats = localStorage.getItem('stats_5')\n        const tags = localStorage.getItem('tags_2')\n        const saveData = (data, fileName) => localStorage.setItem(fileName, JSON.stringify(data))\n        return (\n            <ToDo\n                tasks={tasks}\n                inventory={inventory}\n                settings={settings}\n                stats={stats}\n                tags={tags}\n                saveData={saveData}\n                convertDate={convertDate}\n                articulateDateDue={articulateDateDue}\n                arrayMove={arrayMove}\n            />\n        )\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}