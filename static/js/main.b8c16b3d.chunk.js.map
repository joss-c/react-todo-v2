{"version":3,"sources":["functions.js","randomMessage.js","thenBy.min.js","Stats.js","Calendar.js","randomName.js","CatGif.js","CustomModal.js","Shop.js","AddTask.js","Priority.js","List.js","Settings.js","TaskText.js","TaskDetails.js","TaskButtons.js","TaskEditBox.js","Tags.js","Task.js","ToDo.js","App.js","serviceWorker.js","index.js"],"names":["convertDate","date","convertTo","ISODate","Date","toISOString","substring","getTime","year","month","day","setUTCFullYear","setUTCMonth","setUTCDate","toLocaleDateString","getDate","time","todayISO","now","articulateDateDue","dateDue","today","arrayMove","arr","fromIndex","toIndex","arrCopy","slice","element","length","splice","randomMessage","messages","Math","floor","random","firstBy","identity","v","ignoreCase","toLowerCase","tb","func","opt","x","this","y","f","direction","prop","v1","uf","preprocess","cmp","v2","makeCompareFunction","a","b","thenBy","Stats","_ref","stats","tasksCompleted","totalTasksCompleted","Object","keys","oneWeekAgo","totalTasksCompletedOneWeek","reduce","total","id","timeCompleted","react_default","createElement","className","bonusStars","starsUsed","concat","Calendar","handleOnChange","value","Fragment","reactstrap_es","onChange","type","min","max","randomName","consonants","vowels","endings","randomConsonant","newName","charAt","toUpperCase","CatGif","_Component","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSave","url","kitty","name","popoverOpen","saveKitty","setState","saveButtonClicked","state","loading","inherits","createClass","key","_this2","axios","method","headers","x-api-key","timeout","then","response","gif","data","console","log","catch","error","alert","_this3","_this$state","react_spinners","color","sizeUnit","size","body","style","width","src","alt","onClick","disabled","Component","CustomModal","isOpen","modalType","header","toggleModal","toggle","children","ShopItems","buttonDisabled","totalStars","buyGif","xs","offset","SavedKitties","toggleSavedKitties","savedKitties","inventory","striped","catGifs","map","index","scope","Shop","stars","showGif","deductStars","toggleInnerModal","innerModal","currentCatGif","_this$props","CustomModal_CustomModal","Shop_ShopItems","CatGif_CatGif","Shop_SavedKitties","AddTask","createItem","event","tasks","selectedPriority","addItem","convertPriority","selectedDate","selectedTag","inputElementValue","inputElement","current","itemInstances","task","text","active","uuid","hidden","priority","timeCreated","instance","editPanelHidden","settingsHidden","tag","preventDefault","React","createRef","_this$props2","inputChange","onSubmit","innerRef","placeholder","outline","Priority","List","Settings","settings","selectedStyle","changeStyle","changeColor","toggleInactiveTasks","colorHigh","colorMedium","colorLow","Settings_this","label","checked","hideInactive","TaskText","toggleEditItem","handleTextChange","editText","backgroundColor","textDecorationLine","lib_default","stopPropagation","defaultValue","TaskDetails","react_transition_group","in","classNames","TaskButtons","markComplete","sortItems","TaskEditBox","Tags","tags","changeTag","addTag","removeTag","showButtons","Task","TaskText_TaskText","TaskDetails_TaskDetails","TaskButtons_TaskButtons","TaskEditBox_TaskEditBox","Calendar_Calendar","editDate","Priority_Priority","editPriority","Tags_Tags","editTaskTag","ToDo","clone","object","JSON","parse","stringify","newItem","selectedSort","toConsumableArray","sortItemsBy","undo","setTimeout","notify","notifyStyle","background","deleteItem","err","filter","item","changePriority","target","newDate","toggleItems","tasksCopy","forEach","moveFrom","showAll","moveTo","sort","manual","selectSortBy","targetTask","targetPanelState","editTaskText","changeDate","updateDate","selectedColor","styles","newTag","prompt","includes","currentText","hideEditPanels","modals","font","settingsModal","statsModal","shopModal","createShowQueue","Default","Marie","Halloween","prevProps","prevState","saveData","prevTasksCompleted","revisedStats","_this$state2","document","notify_default","sm","md","lg","xl","AddTask_AddTask","List_List","Task_Task","Settings_Settings","Stats_Stats","Shop_Shop","defaultProps","App","localStorage","getItem","src_ToDo","fileName","setItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8c16b3d.chunk.js","sourcesContent":["const convertDate = (date, convertTo) => {\r\n    const ISODate = new Date(date).toISOString().substring(0, 10)\r\n    if (convertTo === 'ISO') {\r\n        return ISODate\r\n    } else if (convertTo === 'timestamp') {\r\n        return new Date(date).getTime()\r\n    } else if (convertTo === 'local') {\r\n        const year = ISODate.substring(0, 4)\r\n        const month = ISODate.substring(5, 7)\r\n        const day = ISODate.substring(8, 10)\r\n        const date = new Date()\r\n        date.setUTCFullYear(year)\r\n        date.setUTCMonth(month - 1)\r\n        date.setUTCDate(day)\r\n        return date.toLocaleDateString('en-GB')\r\n    }\r\n}\r\n\r\nconst getDate = (time) => {\r\n    if (time === 'today') {\r\n        const todayISO = convertDate(Date.now(), 'ISO')\r\n        const todayTimestamp = convertDate(todayISO, 'timestamp')\r\n        return todayTimestamp\r\n    }\r\n}\r\n\r\nconst articulateDateDue = (dateDue) => {\r\n    let today = convertDate(Date.now(), 'ISO')\r\n    today = convertDate(today, 'timestamp')\r\n    if (dateDue - today < 0) {\r\n        return \"Overdue\"\r\n    }\r\n    if (dateDue - today === 0) {\r\n        return \"Today\"\r\n    } else if (dateDue - today === 86400000) {\r\n        return \"Tomorrow\"\r\n    } else {\r\n        return convertDate(dateDue, 'local')\r\n    }\r\n}\r\n\r\nconst arrayMove = (arr, fromIndex, toIndex) => {\r\n    const arrCopy = arr.slice(0)\r\n    const element = arr[fromIndex]\r\n    if (fromIndex === 0) {\r\n        toIndex = arr.length\r\n    }\r\n    arrCopy.splice(fromIndex, 1)\r\n    arrCopy.splice(toIndex, 0, element)\r\n    return arrCopy\r\n}\r\n\r\nexport { convertDate, getDate, articulateDateDue, arrayMove }","const randomMessage = () => {\r\n    const messages = [\r\n        \"Great job! 👍\",\r\n        \"Nice! 👌\",\r\n        \"You're doing so great!\",\r\n        \"You're on a roll!\",\r\n        \"We're doing it! 😁\",\r\n        \"Weow! 😺\",\r\n        \"A++ for effort!✨\",\r\n        \"Cool 😎\",\r\n        \"Amazing! 😄\",\r\n        \"Impressive 😎\",\r\n        \"Incredible! 👏\",\r\n        \"Nice moves! 🕺\",\r\n        \"Making progress! 😊\"\r\n    ]\r\n    return messages[Math.floor(Math.random() * messages.length)]\r\n}\r\n\r\nexport { randomMessage }","/***\r\n   Copyright 2013 Teun Duynstee\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n     http://www.apache.org/licenses/LICENSE-2.0\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\nvar firstBy = (function() {\r\n\r\n    function identity(v){return v;}\r\n\r\n    function ignoreCase(v){return typeof(v)===\"string\" ? v.toLowerCase() : v;}\r\n\r\n    function makeCompareFunction(f, opt){\r\n        opt = typeof(opt)===\"number\" ? {direction:opt} : opt||{};\r\n        if(typeof(f)!=\"function\"){\r\n            var prop = f;\r\n            // make unary function\r\n            f = function(v1){return !!v1[prop] ? v1[prop] : \"\";}\r\n        }\r\n        if(f.length === 1) {\r\n            // f is a unary function mapping a single item to its sort score\r\n            var uf = f;\r\n            var preprocess = opt.ignoreCase?ignoreCase:identity;\r\n            var cmp = opt.cmp || function(v1,v2) {return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;}\r\n            f = function(v1,v2) {return cmp(preprocess(uf(v1)), preprocess(uf(v2)));}\r\n        }\r\n        if(opt.direction === -1) return function(v1,v2){return -f(v1,v2)};\r\n        return f;\r\n    }\r\n\r\n    /* adds a secondary compare function to the target function (`this` context)\r\n       which is applied in case the first one returns 0 (equal)\r\n       returns a new compare function, which has a `thenBy` method as well */\r\n    function tb(func, opt) {\r\n        /* should get value false for the first call. This can be done by calling the \r\n        exported function, or the firstBy property on it (for es6 module compatibility)\r\n        */\r\n        var x = (typeof(this) == \"function\" && !this.firstBy) ? this : false;\r\n        var y = makeCompareFunction(func, opt);\r\n        var f = x ? function(a, b) {\r\n                        return x(a,b) || y(a,b);\r\n                    }\r\n                  : y;\r\n        f.thenBy = tb;\r\n        return f;\r\n    }\r\n    tb.firstBy = tb;\r\n    return tb;\r\n})();\r\n\r\nexport { firstBy }","import React from 'react'\r\n\r\nexport const Stats = ({ stats }) => {\r\n    const tasksCompleted = stats.tasksCompleted\r\n    const totalTasksCompleted = Object.keys(tasksCompleted).length\r\n    const oneWeekAgo = Date.now() - (60 * 60 * 24 * 7 * 1000)\r\n    const totalTasksCompletedOneWeek = Object.keys(tasksCompleted)\r\n        .reduce((total, id) => {\r\n            if (tasksCompleted[id].timeCompleted > oneWeekAgo) {\r\n                total++\r\n            }\r\n            return total\r\n        }, 0)\r\n    return (\r\n        <div className='align-center'>\r\n            <div className='star-big'>\r\n                {\"★\"}\r\n            </div>\r\n            <h1>{\"Stars: \"}<span className=\"special-text\">{totalTasksCompleted + stats.bonusStars - stats.starsUsed}</span></h1>\r\n            <div>\r\n                {`Tasks completed: ${totalTasksCompleted}`}\r\n            </div>\r\n            <div>\r\n                {`This week: ${totalTasksCompletedOneWeek}`}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Input } from 'reactstrap'\r\n\r\nexport const Calendar = ({ handleOnChange, value, convertDate }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Input \r\n                className='calendar-element'\r\n                onChange={handleOnChange} type='date'\r\n                value={value}\r\n                min={convertDate(Date.now(), 'ISO')}\r\n                max='2019-12-31'\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n","const randomName = () => {\r\n    const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\r\n    const vowels = ['a', 'e', 'i', 'o', 'u']\r\n    const endings = ['y', 'ie', 'er', 'el', 'on', 'en', 'es', 'ely', 'ina', 'ia', 'ers', 'erick', 'elyn', 'ica', 'arin', 'athon']\r\n    const randomConsonant = () => consonants[Math.floor(Math.random() * consonants.length)]\r\n    const randomVowel = () => vowels[Math.floor(Math.random() * vowels.length)]\r\n    const randomEnding = () => endings[Math.floor(Math.random() * endings.length)]\r\n    let newName = randomConsonant() + randomVowel() + randomConsonant() + randomEnding()\r\n    newName = newName.charAt(0).toUpperCase() + newName.slice(1)\r\n    return newName\r\n}\r\n\r\nexport { randomName }","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Button, Card, CardTitle } from 'reactstrap'\r\nimport { ClipLoader } from 'react-spinners'\r\nimport { randomName } from './randomName'\r\n\r\nexport class CatGif extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { \r\n            loading: true,\r\n            saveButtonClicked: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios({\r\n            method: 'get',\r\n            url: 'https://api.thecatapi.com/v1/images/search?limit=1&mime_types=gif&format=json&order=RANDOM',\r\n            headers: { 'x-api-key': 'f5568fae-d85b-4310-8e88-cb282e0e2bac' },\r\n            timeout: 20000 \r\n        })\r\n            .then(response => {\r\n                const gif = response.data\r\n                console.log(gif[0].url)\r\n                this.setState({\r\n                    loading: false,\r\n                    gif\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n\r\n    handleSave = (url) => {\r\n        const kitty = {\r\n            url: url,\r\n            name: randomName(),\r\n            popoverOpen: false\r\n        }\r\n        this.props.saveKitty(kitty)\r\n        this.setState({ saveButtonClicked: true })\r\n    }\r\n\r\n    render() {\r\n        const { loading, gif, saveButtonClicked } = this.state\r\n        return (\r\n            (loading) ?\r\n                <div className='align-center'>\r\n                    <ClipLoader\r\n                        color='#007bff'\r\n                        sizeUnit='px'\r\n                        size={50}\r\n                        loading={loading}\r\n                    />\r\n                </div>\r\n                :\r\n                <Card body className='text-center'>\r\n                    <CardTitle>{\"Here's your kitty! ♥\"}</CardTitle>\r\n                    <div className='align-center margin-bottom-5'>\r\n                        <img\r\n                            className='rounded-border'\r\n                            style={{ width: '100%' }}\r\n                            src={gif[0].url}\r\n                            alt=\"This should be a cat gif...\"\r\n                        />\r\n                    </div>\r\n                    <Button\r\n                        onClick={() => this.handleSave(gif[0].url)}\r\n                        color={(saveButtonClicked) ? 'success' : 'info'}\r\n                        disabled={saveButtonClicked}\r\n                    >\r\n                        {(saveButtonClicked) ? \"Saved!\" : \"Save Kitty\"}\r\n                    </Button>\r\n                </Card>\r\n\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nexport const CustomModal = (props) => {\r\n    const { className, isOpen, modalType, header, toggleModal } = props\r\n    return (\r\n        <Modal\r\n            isOpen={isOpen}\r\n            toggle={() => toggleModal(modalType)}\r\n        >\r\n            <ModalHeader toggle={() => toggleModal(modalType)}>\r\n                {header}\r\n            </ModalHeader>\r\n            <ModalBody className={className}>\r\n                {props.children}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    color='primary'\r\n                    onClick={() => toggleModal(modalType)}\r\n                >\r\n                    {\"OK\"}\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Badge,\r\n    Collapse,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    CardText,\r\n    Popover,\r\n    PopoverHeader,\r\n    PopoverBody,\r\n    Table\r\n} from 'reactstrap'\r\nimport { CatGif } from './CatGif'\r\nimport { CustomModal } from './CustomModal'\r\n\r\nconst ShopItems = (props) => {\r\n    const { buttonDisabled, totalStars, buyGif } = props\r\n    return (\r\n        <Row className='margin-top-10'>\r\n            <Col\r\n                xs={{ size: 10, offset: 1 }}\r\n            >\r\n                <Card className='margin-bottom-10'>\r\n                    <CardHeader>{\"Items\"}</CardHeader>\r\n                    <CardBody>\r\n                        <Card className='align-center'>\r\n                            <CardBody>\r\n                                <CardText>{\"1 x Cat Gif: ⭐2\"}</CardText>\r\n                                <Button\r\n                                    className='buy-button'\r\n                                    color='warning'\r\n                                    disabled={buttonDisabled || totalStars < 2}\r\n                                    onClick={() => buyGif(2)}\r\n                                >\r\n                                    {\"Retrieve Cuteness\"}\r\n                                </Button>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nconst SavedKitties = (props) => {\r\n    const { toggleSavedKitties, savedKitties, inventory, toggleModal } = props\r\n    return (\r\n        <Row>\r\n            <Col xs={{ offset: 2 }}>\r\n                <p></p>\r\n                <Button\r\n                    className='margin-bottom-10'\r\n                    onClick={toggleSavedKitties}\r\n                >\r\n                    {\"Saved Kitties\"}\r\n                </Button>\r\n                <Collapse isOpen={savedKitties}>\r\n                    <Table striped>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Kitty</th>\r\n                                <th>Gif</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {inventory.catGifs.map((gif, index) =>\r\n                                <tr>\r\n                                    <th scope=\"row\">{index + 1}</th>\r\n                                    <td>{gif.name}</td>\r\n                                    <td>\r\n                                        <Button\r\n                                            color='link'\r\n                                            onClick={() => toggleModal(gif)}\r\n                                        >\r\n                                            {\"View\"}\r\n                                        </Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Collapse>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport class Shop extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            showGif: false,\r\n            buttonDisabled: false,\r\n            savedKitties: false,\r\n            innerModal: false,\r\n            currentCatGif: ''\r\n        }\r\n    }\r\n\r\n    buyGif = (stars) => {\r\n        this.setState({\r\n            showGif: true,\r\n            buttonDisabled: true\r\n        })\r\n        this.props.deductStars(stars)\r\n    }\r\n\r\n    toggleSavedKitties = () => {\r\n        this.setState({ savedKitties: !this.state.savedKitties })\r\n    }\r\n\r\n    toggleInnerModal = (gif) => {\r\n        if (this.state.innerModal) {\r\n            this.setState({\r\n                innerModal: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                innerModal: true,\r\n                currentCatGif: gif\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { stats, inventory, saveKitty } = this.props\r\n        const { buttonDisabled, savedKitties, innerModal, currentCatGif } = this.state\r\n        const totalStars = Object.keys(stats.tasksCompleted).length + stats.bonusStars - stats.starsUsed\r\n        return (\r\n            <React.Fragment>\r\n                <CustomModal\r\n                    isOpen={innerModal}\r\n                    header={currentCatGif.name}\r\n                    toggleModal={this.toggleInnerModal}\r\n                >\r\n                    <img\r\n                        style={{ width: '100%' }}\r\n                        src={currentCatGif.url}\r\n                        alt=\"This should be a cat gif..\"\r\n                    >\r\n                    </img>\r\n                </CustomModal>\r\n                <Row>\r\n                    <Col xs={{ size: 6, offset: 6 }}>\r\n                        <h4 className='align-center'>\r\n                            {\"Stars \"}\r\n                            <Badge\r\n                                className='golden-text'\r\n                                color='primary'>\r\n                                <span className='drop-shadow'>\r\n                                    {totalStars}\r\n                                </span>\r\n                            </Badge>\r\n                        </h4>\r\n                    </Col>\r\n                </Row>\r\n                <ShopItems\r\n                    buttonDisabled={buttonDisabled}\r\n                    totalStars={totalStars}\r\n                    buyGif={this.buyGif}\r\n                />\r\n                {(!this.state.showGif) ? null :\r\n                    <CatGif saveKitty={saveKitty} />}\r\n                <SavedKitties\r\n                    toggleSavedKitties={this.toggleSavedKitties}\r\n                    savedKitties={savedKitties}\r\n                    inventory={inventory}\r\n                    toggleModal={this.toggleInnerModal}\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport uuid from 'uuid'\r\nimport { Row, Col, Input, Button, Form, FormGroup } from 'reactstrap'\r\n\r\nexport class AddTask extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputElement = React.createRef()\r\n    }\r\n    createItem = (event) => {\r\n        const { \r\n            tasks,\r\n            selectedPriority,\r\n            addItem,\r\n            convertPriority,\r\n            convertDate,\r\n            selectedDate,\r\n            selectedTag\r\n        } = this.props\r\n        const inputElementValue = this.inputElement.current.value\r\n        const itemInstances = tasks.reduce(function (total, task) {\r\n            return total + (inputElementValue === task.text ? 1 : 0)\r\n        }, 1)\r\n        const newItem = {\r\n            active: true,\r\n            id: uuid().substring(0, 12),\r\n            hidden: false,\r\n            text: inputElementValue,\r\n            priority: convertPriority(selectedPriority),\r\n            timeCreated: Date.now(),\r\n            dateDue: convertDate(selectedDate, 'timestamp'),\r\n            instance: itemInstances,\r\n            editPanelHidden: true,\r\n            settingsHidden: true,\r\n            tag: (selectedTag === 'None') ? 'None' : selectedTag,\r\n        }\r\n        addItem(newItem)\r\n        this.inputElement.current.value = \"\"\r\n        event.preventDefault()\r\n    }\r\n    render() {\r\n        const { inputChange, buttonDisabled } = this.props\r\n        return (\r\n            <Form onSubmit={this.createItem}>\r\n                <FormGroup>\r\n                    <Row className='row-0 no-gutters'>\r\n                        <Col className='padding-right' xs='9'>\r\n                            <Input \r\n                                type='text'\r\n                                className='input--add-task'\r\n                                onChange={inputChange}\r\n                                innerRef={this.inputElement}\r\n                                placeholder='Enter Task'>\r\n                            </Input>\r\n                        </Col>\r\n                        <Col xs='3'>\r\n                            <Button\r\n                                className='add-button'\r\n                                outline color='primary'\r\n                                disabled={buttonDisabled}\r\n                                type='submit'\r\n                            >\r\n                                {\"Add\"}\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Input } from 'reactstrap'\r\n\r\nexport const Priority = ({ handleOnChange, value }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Input\r\n                type='select'\r\n                className='priority-element'\r\n                value={value}\r\n                onChange={handleOnChange}\r\n            >\r\n                <option value='Low'>Priority: Low</option>\r\n                <option value='Medium'>Medium</option>\r\n                <option value='High'>High</option>\r\n            </Input>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const List = (props) => {\r\n    return (\r\n        <div className='list'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Row, Col, Input, CustomInput } from 'reactstrap'\r\n\r\nexport const Settings = ({ settings, selectedStyle, changeStyle, changeColor, toggleInactiveTasks }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <fieldset>\r\n                <div>\r\n                    <legend>Choose your colours</legend>\r\n                    <div>\r\n                        <Input\r\n                            className='select-style'\r\n                            type='select'\r\n                            value={selectedStyle}\r\n                            onChange={changeStyle}>\r\n                            <option value='None'>None</option>\r\n                            <option value='Default'>Default</option>\r\n                            <option value='Marie'>Marie</option>\r\n                            <option value='Halloween'>Halloween</option>\r\n                        </Input>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='change-color'\r\n                            type='color'\r\n                            value={settings.style.colorHigh}\r\n                            onChange={(event) => changeColor(event, 'colorHigh')}>\r\n                        </input>\r\n                        <label>High Priority</label>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='change-color'\r\n                            type='color'\r\n                            value={settings.style.colorMedium}\r\n                            onChange={(event) => changeColor(event, 'colorMedium')}>\r\n                        </input>\r\n                        <label>Medium Priority</label>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='change-color'\r\n                            type='color'\r\n                            value={settings.style.colorLow}\r\n                            onChange={(event) => this.changeColor(event, 'colorLow')}>\r\n                        </input>\r\n                        <label>Low Priority</label>\r\n                    </div>\r\n                </div>\r\n                <React.Fragment>\r\n                    <div>-----------</div>\r\n                    <Row>\r\n                        <Col>\r\n                            <CustomInput\r\n                                type='checkbox'\r\n                                id='checkbox'\r\n                                label='Show completed tasks'\r\n                                checked={!settings.hideInactive}\r\n                                onChange={toggleInactiveTasks} />\r\n                        </Col>\r\n                    </Row>\r\n                    <div>-----------</div>\r\n                </React.Fragment>\r\n            </fieldset>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport TextareaAutosize from 'react-autosize-textarea'\r\nimport { Row, Col, Button } from 'reactstrap'\r\n\r\nexport const TaskText = ({ settings, task, index, toggleEditItem, handleTextChange, editText, children }) => {\r\n    return (\r\n        <div\r\n            className={(task.active) ? 'task' : 'task animate-background'}\r\n            onClick={() => toggleEditItem(index)}\r\n            style={{\r\n                backgroundColor: (!task.active) ?\r\n                    '#e5e5e5' :\r\n                    (task.priority === 3) ?\r\n                        settings.style.colorLow :\r\n                        (task.priority === 2) ?\r\n                            settings.style.colorMedium :\r\n                            settings.style.colorHigh\r\n            }}\r\n        >\r\n            <span \r\n                style={{\r\n                textDecorationLine: (task.active) ?\r\n                    'none' :\r\n                    'line-through'\r\n                }}\r\n            >\r\n                {(task.editPanelHidden) ?\r\n                    <Row>\r\n                        <Col>\r\n                            {task.text}\r\n                            <span className='instance'>\r\n                                {(task.instance > 1) ?\r\n                                    ` (${task.instance})` :\r\n                                    null}\r\n                            </span>\r\n                        </Col>\r\n                    </Row> :\r\n                    <span>\r\n                        <Row className='edit-text no-gutters'>\r\n                            <Col xs='10'>\r\n                                <TextareaAutosize\r\n                                    className='edit-text-element'\r\n                                    onChange={(event) => handleTextChange(event)}\r\n                                    onClick={(event) => event.stopPropagation()}\r\n                                    defaultValue={task.text}\r\n                                />\r\n                            </Col>\r\n                            <Col xs='2'>\r\n                                <Button\r\n                                    className='edit-text-button'\r\n                                    color='secondary'\r\n                                    size='sm'\r\n                                    onClick={(event) => editText(event, index)}\r\n                                >\r\n                                    {\"OK\"}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </span>}\r\n            </span>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { Row, Col } from 'reactstrap'\r\n\r\nexport const TaskDetails = ({ task, articulateDateDue }) => \r\n    <Row>\r\n        <Col className='task-details'>\r\n            <TransitionGroup>\r\n                <div className='date-due x-small'>\r\n                    {(task.tag === 'None') ?\r\n                        null :\r\n                        <span className='tag'>{task.tag}</span>}\r\n                    {(task.active) ?\r\n                        `Due: ${articulateDateDue(task.dateDue)}` :\r\n                        <React.Fragment>\r\n                            <span className='x-small'>\r\n                                {\"Complete \"}\r\n                            </span>\r\n                            <CSSTransition\r\n                                in={!task.active}\r\n                                timeout={1000}\r\n                                classNames='star'\r\n                            >\r\n                                <span className='star x-small'>\r\n                                    {\"★\"}\r\n                                </span>\r\n                            </CSSTransition>\r\n                            <CSSTransition\r\n                                in={!task.active}\r\n                                timeout={1000}\r\n                                classNames='plus-one'\r\n                            >\r\n                                <span className='plus-one x-small'>\r\n                                    {\" +1\"}\r\n                                </span>\r\n                            </CSSTransition>\r\n                        </React.Fragment>}\r\n                </div>\r\n            </TransitionGroup>\r\n        </Col>\r\n    </Row>","import React from 'react'\r\nimport { Button } from 'reactstrap'\r\n\r\nexport const TaskButtons = ({ task, index, markComplete, sortItems }) => {\r\n    return (\r\n        <div className='item-buttons'>\r\n            <Button\r\n                className='sort-button'\r\n                size='sm'\r\n                outline color='secondary'\r\n                onClick={() => sortItems(index, true)}\r\n            >\r\n                {\"↑\"}\r\n            </Button>\r\n            <Button\r\n                className='delete-item-button'\r\n                size='sm'\r\n                outline\r\n                color={(task.active) ? 'success' : 'danger'}\r\n                onClick={() => markComplete(index)}\r\n            >\r\n                {(task.active) ? \"✓\" : \"✕\"}\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Button } from 'reactstrap'\r\n\r\nexport const TaskEditBox = ({ task, index, markComplete, children }) => {\r\n    return (\r\n        <div className='edit-task' hidden={task.editPanelHidden}>\r\n            <span hidden={!task.active}>\r\n                {children}\r\n            </span>\r\n            <div className='undo'>\r\n                <Button \r\n                    hidden={task.active}\r\n                    className='undo-button'\r\n                    outline\r\n                    color='secondary'\r\n                    onClick={() => markComplete(index, true)}\r\n                >\r\n                    {`Undo \"Mark Complete\"`}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Input, Button } from 'reactstrap'\r\n\r\nexport const Tags = (props) => {\r\n    const { tags, selectedTag, changeTag, addTag, removeTag, showButtons } = props\r\n    return (\r\n        <React.Fragment>\r\n            <Input \r\n                type='select'\r\n                className='select-tag'\r\n                value={selectedTag}\r\n                onChange={changeTag}\r\n            >\r\n                {tags.map((tag, index) => <option key={index} value={tag}>\r\n                    {(tag === 'None') ? 'Tag: None' : tag}\r\n                </option>)}\r\n            </Input>\r\n            {(!showButtons) ? null :\r\n                <React.Fragment>\r\n                    <Button\r\n                        outline\r\n                        color='secondary'\r\n                        size='sm'\r\n                        onClick={removeTag}\r\n                    >\r\n                        {\"-\"}\r\n                    </Button>\r\n                    <Button\r\n                        outline\r\n                        color='secondary'\r\n                        size='sm'\r\n                        onClick={addTag}\r\n                    >\r\n                        {\"+\"}\r\n                    </Button>\r\n                </React.Fragment>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { Row, Col } from 'reactstrap'\r\nimport { TaskText } from './TaskText'\r\nimport { TaskDetails } from './TaskDetails'\r\nimport { TaskButtons } from './TaskButtons'\r\nimport { TaskEditBox } from './TaskEditBox'\r\nimport { Calendar } from './Calendar'\r\nimport { Priority } from './Priority'\r\nimport { Tags } from './Tags'\r\n\r\nexport const Task = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Row className='no-gutters'>\r\n                <Col xs='9'>\r\n                    <TaskText\r\n                        settings={props.settings}\r\n                        task={props.task}\r\n                        index={props.index}\r\n                        handleTextChange={props.handleTextChange}\r\n                        editText={props.editText}\r\n                        toggleEditItem={props.toggleEditItem}\r\n                    >\r\n                        <TaskDetails\r\n                            task={props.task}\r\n                            articulateDateDue={props.articulateDateDue}\r\n                        />\r\n                    </TaskText>\r\n                </Col>\r\n                <Col xs='3'>\r\n                    <TransitionGroup>\r\n                        <CSSTransition\r\n                            key={props.task.id}\r\n                            timeout={500}\r\n                            classNames='fade'>\r\n                            <TaskButtons\r\n                                task={props.task}\r\n                                index={props.index}\r\n                                markComplete={props.markComplete}\r\n                                sortItems={props.sortItems}\r\n                            />\r\n                        </CSSTransition>\r\n                    </TransitionGroup>\r\n                </Col>\r\n            </Row>\r\n            <TaskEditBox\r\n                task={props.task}\r\n                index={props.index}\r\n                markComplete={props.markComplete}>\r\n                <Row>\r\n                    <Col>\r\n                        <Calendar\r\n                            value={props.convertDate(props.task.dateDue, 'ISO')}\r\n                            handleOnChange={(event) => props.editDate(event, props.index)}\r\n                            convertDate={props.convertDate}\r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <Priority\r\n                            value={props.convertPriority(props.task.priority)}\r\n                            handleOnChange={(event) => props.editPriority(event, props.index)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className='margin-top-2'>\r\n                    <Col xs={{ size: 6, offset: 6 }}>\r\n                        <Tags\r\n                            tags={props.tags}\r\n                            index={props.index}\r\n                            selectedTag={props.task.tag}\r\n                            changeTag={(event) => props.editTaskTag(event, props.index)}\r\n                            addTag={props.addTag}\r\n                            removeTag={props.removeTag}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </TaskEditBox>\r\n        </React.Fragment>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport Notifications, { notify } from 'react-notify-toast'\r\nimport uuid from 'uuid'\r\nimport { convertDate, getDate, articulateDateDue, arrayMove } from './functions'\r\nimport { randomMessage } from './randomMessage'\r\nimport { firstBy } from './thenBy.min.js'\r\nimport { Container, Row, Col, Input, Button } from 'reactstrap'\r\nimport { Stats } from './Stats'\r\nimport { Calendar } from './Calendar'\r\nimport { Shop } from './Shop'\r\nimport { AddTask } from './AddTask'\r\nimport { CustomModal } from './CustomModal'\r\nimport { Priority } from './Priority'\r\nimport { List } from './List'\r\nimport { Settings } from './Settings'\r\nimport { Task } from './Task'\r\nimport { Tags } from './Tags'\r\n\r\nclass ToDo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            tasks: (this.props.tasks) ? JSON.parse(this.props.tasks) :\r\n                [{\r\n                    active: true,\r\n                    hidden: false,\r\n                    id: uuid().substring(0, 10),\r\n                    text: \"Sample Task ✨\",\r\n                    priority: 3,\r\n                    time: Date.now(),\r\n                    instance: 1,\r\n                    editPanelHidden: true,\r\n                    dateDue: getDate('today'),\r\n                    tag: 'None'\r\n                }],\r\n            inventory: (this.props.inventory) ? JSON.parse(this.props.inventory) :\r\n                {\r\n                    catGifs: []\r\n                },\r\n            settings: (this.props.settings) ? JSON.parse(this.props.settings) :\r\n                {\r\n                    style: {\r\n                        colorHigh: '#f5c6cb',\r\n                        colorMedium: '#ffeeba',\r\n                        colorLow: '#bee5eb',\r\n                        backgroundColor: '#ffffff',\r\n                        font: ''\r\n                    },\r\n                    hideInactive: false\r\n                },\r\n            stats: (this.props.stats) ? JSON.parse(this.props.stats) :\r\n                {\r\n                    tasksCompleted: {},\r\n                    bonusStars: 0,\r\n                    starsUsed: 0,\r\n                },\r\n            modals: {\r\n                settingsModal: false,\r\n                statsModal: false,\r\n                shopModal: false\r\n            },\r\n            tags: (this.props.tags) ? JSON.parse(this.props.tags) : ['None'],\r\n            buttonDisabled: true,\r\n            selectedPriority: 'Low',\r\n            selectedSort: 'None',\r\n            selectedDate: this.props.convertDate(Date.now(), 'ISO'),\r\n            selectedStyle: 'None',\r\n            selectedTag: 'None',\r\n            editTaskText: '',\r\n        }\r\n        this.selectSortBy = React.createRef()\r\n        this.notify = notify.createShowQueue()\r\n        this.styles = {\r\n            Default: ['#bee5eb', '#ffeeba', '#f5c6cb', '#ffffff'],\r\n            Marie: ['#fce8f7', '#f2b5e2', '#f46ed0', '#ffffff'],\r\n            Halloween: ['#feeeb8', '#ffa100', '#e76427', '#000000']\r\n        }\r\n        this.notifyStyle = { background: '#007bff', text: '#ffffff' }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { tasks, inventory, settings, stats, tags } = this.state\r\n        const { saveData } = this.props\r\n        console.log(this.state)\r\n        if (prevState.tasks !== tasks) {\r\n            saveData(tasks, 'tasks')\r\n        }\r\n        if (prevState.inventory !== inventory) {\r\n            saveData(inventory, 'inventory_3')\r\n        }\r\n        if (prevState.settings !== settings) {\r\n            saveData(settings, 'settings')\r\n        }\r\n        if (prevState.stats !== stats) {\r\n            saveData(stats, 'stats_5')\r\n        }\r\n        if (prevState.tags !== tags) {\r\n            saveData(tags, 'tags_2')\r\n        }\r\n        // Uncredit bonus stars on 'mark uncomplete'\r\n        const prevTasksCompleted = Object.keys(prevState.stats.tasksCompleted).length\r\n        const tasksCompleted = Object.keys(stats.tasksCompleted).length\r\n        if (tasksCompleted < prevTasksCompleted) {\r\n            if (prevTasksCompleted % 10 === 0) {\r\n                let revisedStats = this.clone(stats)\r\n                revisedStats.bonusStars -= 2\r\n                console.log(\"Stars are being removed..\")\r\n                this.setState({ stats: revisedStats })\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.hideEditPanels()\r\n        this.sortItems()\r\n        console.log(this.state)\r\n        this.notify(\"You got this! 😊\", 'custom', 2000, this.notifyStyle)\r\n    }\r\n\r\n    clone = (object) => {\r\n        return JSON.parse(JSON.stringify(object))\r\n    }\r\n\r\n    addItem = (newItem) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks = [...tasks, newItem]\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({\r\n            tasks: tasks,\r\n            buttonDisabled: true\r\n        })\r\n    }\r\n\r\n    markComplete = (index, undo) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        let stats = this.clone(this.state.stats)\r\n        const task = tasks[index]\r\n        if (tasks.length === 0) {\r\n            console.log('List is empty')\r\n        } else {\r\n            try {\r\n                const itemIsActive = task.active\r\n                if (itemIsActive) {\r\n                    task.active = false\r\n                    stats.tasksCompleted[task.id] = {\r\n                        timeCreated: task.timeCreated,\r\n                        timeCompleted: Date.now()\r\n                    }\r\n                    if (this.state.settings.hideInactive) {\r\n                        tasks = this.sortItemsBy(tasks, 'active')\r\n                    }\r\n                    this.setState({\r\n                        tasks: tasks,\r\n                        stats: stats\r\n                    })\r\n                    // Stars stuff\r\n                    const tasksCompleted = Object.keys(stats.tasksCompleted).length\r\n                    if (tasksCompleted % 5 === 0) {\r\n                        setTimeout(() => {\r\n                            this.notify(randomMessage(), 'custom', 2000, this.notifyStyle)\r\n                        }, 500)\r\n                    }\r\n                    if (tasksCompleted % 10 === 0) {\r\n                        setTimeout(() => {\r\n                            this.notify('⭐+2 STARS BONUS⭐', 'custom', 2000, { background: '#fff5be', text: '#000000' })\r\n                            stats.bonusStars += 2\r\n                            this.setState({ stats: stats })\r\n                        }, 500)\r\n                    }\r\n                } else if (undo) {\r\n                    task.editPanelHidden = true\r\n                    task.active = true\r\n                    delete stats.tasksCompleted[task.id]\r\n                    this.setState({\r\n                        tasks: tasks,\r\n                        stats: stats\r\n                    })\r\n                } else {\r\n                    this.deleteItem(index)\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteItem = (key) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks = tasks.filter((item, index) =>\r\n            index !== key\r\n        )\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    changePriority = (event) => {\r\n        const selectedPriority = event.target.value\r\n        this.setState({ selectedPriority: selectedPriority })\r\n    }\r\n\r\n    convertPriority = (priority) => {\r\n        if (typeof priority === 'string') {\r\n            return (priority === 'Low') ? 3\r\n                : (priority === 'Medium') ? 2\r\n                    : 1\r\n        } else {\r\n            return (priority === 3) ? 'Low'\r\n                : (priority === 2) ? 'Medium'\r\n                    : 'High'\r\n        }\r\n    }\r\n\r\n    editPriority = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const task = tasks[index]\r\n        const selectedPriority = event.target.value\r\n        task.priority = this.convertPriority(selectedPriority)\r\n        task.editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    editDate = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const newDate = event.target.value\r\n        tasks[index].dateDue = convertDate(newDate, 'timestamp')\r\n        tasks[index].editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    inputChange = (event) => {\r\n        const currentText = event.target.value\r\n        if (currentText === '') {\r\n            this.setState({ buttonDisabled: true })\r\n        } else {\r\n            this.setState({ buttonDisabled: false })\r\n        }\r\n    }\r\n\r\n    toggleItems = (tasks, type, tag) => {\r\n        let tasksCopy = this.clone(tasks)\r\n        if (type === 'selected tag') {\r\n            tasksCopy.forEach(task => (task.tag !== tag || task.tag === 'None') && (task.hidden = true))\r\n        } else if (type === 'tags only') {\r\n            tasksCopy.forEach(task => (task.tag === 'None') && (task.hidden = true))\r\n        } else if (type === 'show all') {\r\n            tasksCopy.forEach(task => (task.hidden === true) && (task.hidden = false))\r\n        }\r\n        return tasksCopy\r\n    }\r\n\r\n    sortItemsBy = (tasks, selectedSort, moveFrom) => {\r\n        const showAll = this.toggleItems(tasks, 'show all')\r\n        if (selectedSort === 'Manual') {\r\n            const moveTo = moveFrom - 1\r\n            return tasks = this.props.arrayMove(tasks, moveFrom, moveTo)\r\n            //return tasks.sort(firstBy('active', -1))\r\n        }\r\n        if (selectedSort === 'None') {\r\n            return showAll\r\n        } else if (selectedSort === 'Priority') {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy('active', -1)\r\n                    .thenBy('priority')\r\n                    .thenBy('dateDue')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'Date Due') {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy('active', -1)\r\n                    .thenBy('dateDue')\r\n                    .thenBy('priority')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'A-Z') {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy('active', -1)\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'Tags') {\r\n            tasks = showAll\r\n            tasks = this.toggleItems(tasks, 'tags only')\r\n            return tasks.sort(\r\n                firstBy('tag')\r\n                    .thenBy('priority')\r\n                    .thenBy('dateDue')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'Selected Tag') {\r\n            tasks = this.toggleItems(tasks, 'selected tag', this.state.selectedTag)\r\n            return tasks.sort(\r\n                firstBy('tag')\r\n                    .thenBy('priority')\r\n                    .thenBy('dateDue')\r\n                    .thenBy('text')\r\n            )\r\n        } else if (selectedSort === 'active') {\r\n            return tasks.sort(firstBy('active', -1))\r\n        }\r\n    }\r\n\r\n    sortItems = (index, manual) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        const selectedSort = this.selectSortBy.current.value\r\n        if (manual) {\r\n            if (selectedSort === 'None') {\r\n                console.log(\"correct\")\r\n                tasks = this.sortItemsBy(tasks, 'Manual', index)\r\n                this.setState({ tasks: tasks })\r\n            } else {\r\n                tasks = this.sortItemsBy(tasks, 'Manual', index)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: 'None'\r\n                })\r\n            }\r\n        } else {\r\n            if (selectedSort === 'None') {\r\n                tasks = this.sortItemsBy(tasks, selectedSort)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: selectedSort\r\n                })\r\n            } else {\r\n                tasks = this.sortItemsBy(tasks, selectedSort)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: selectedSort\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleEditItem = (index) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        const targetTask = tasks[index]\r\n        const targetPanelState = targetTask.editPanelHidden\r\n        tasks.forEach((task) => {\r\n            if (task.editPanelHidden === false && task !== targetTask) {\r\n                task.editPanelHidden = true\r\n            }\r\n        })\r\n        tasks[index].editPanelHidden = !targetPanelState\r\n        this.setState({\r\n            tasks: tasks,\r\n            editTaskText: targetTask.text\r\n        })\r\n    }\r\n\r\n    changeDate = (event) => {\r\n        const updateDate = event.target.value\r\n        this.setState({ selectedDate: updateDate })\r\n    }\r\n\r\n    changeColor = (event, selectedColor) => {\r\n        let settings = this.clone(this.state.settings)\r\n        settings.style[selectedColor] = event.target.value\r\n        this.setState({\r\n            settings: settings,\r\n            selectedStyle: 'None'\r\n        })\r\n    }\r\n\r\n    changeStyle = (event) => {\r\n        let settings = this.clone(this.state.settings)\r\n        const selectedStyle = event.target.value\r\n        const style = settings.style\r\n        if (style === 'None') {\r\n            this.setState({ selectedStyle: selectedStyle })\r\n        } else {\r\n            style.colorLow = this.styles[selectedStyle][0]\r\n            style.colorMedium = this.styles[selectedStyle][1]\r\n            style.colorHigh = this.styles[selectedStyle][2]\r\n            style.backgroundColor = this.styles[selectedStyle][3]\r\n            this.setState({\r\n                settings: settings,\r\n                selectedStyle: selectedStyle\r\n            })\r\n        }\r\n    }\r\n\r\n    changeTag = (event) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const tag = event.target.value\r\n        if (selectedSort === 'Selected Tag') {\r\n            tasks = this.toggleItems(tasks, 'show all')\r\n            tasks = this.toggleItems(tasks, 'selected tag', tag)\r\n            this.setState({\r\n                tasks: tasks,\r\n                selectedTag: tag\r\n            })\r\n        } else {\r\n            this.setState({ selectedTag: tag })\r\n        }\r\n    }\r\n\r\n    addTag = () => {\r\n        let tags = this.clone(this.state.tags)\r\n        const newTag = prompt(\"Enter a new tag\")\r\n        if (newTag === '' || tags.includes(newTag)) {\r\n            alert(\"Invalid tag or duplicate\")\r\n        } else {\r\n            tags = [...tags, newTag]\r\n            this.setState({\r\n                tags: tags,\r\n                selectedTag: newTag\r\n            })\r\n        }\r\n    }\r\n\r\n    removeTag = () => {\r\n        const { selectedTag } = this.state\r\n        let tags = this.clone(this.state.tags)\r\n        tags = tags.filter(tag => tag !== selectedTag || tag === 'None')\r\n        this.setState({\r\n            tags: tags,\r\n            selectedTag: 'None'\r\n        })\r\n    }\r\n\r\n    editTaskTag = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        let task = tasks[index]\r\n        task.tag = event.target.value\r\n        task.editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    editText = (event, index) => {\r\n        event.stopPropagation()\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks[index].text = this.state.editTaskText\r\n        tasks[index].editPanelHidden = true\r\n        this.setState({ tasks: tasks })\r\n    }\r\n\r\n    handleTextChange = (event) => {\r\n        const currentText = event.target.value\r\n        this.setState({ editTaskText: currentText })\r\n    }\r\n\r\n    hideEditPanels = () => {\r\n        const { tasks } = this.state\r\n        tasks.forEach(task => (task.editPanelHidden === false) && (task.editPanelHidden = true))\r\n    }\r\n\r\n    toggleInactiveTasks = () => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        let settings = this.clone(this.state.settings)\r\n        settings.hideInactive = !settings.hideInactive\r\n        tasks = this.sortItemsBy(tasks, 'active')\r\n        this.setState({\r\n            tasks: tasks,\r\n            settings: settings\r\n        })\r\n    }\r\n\r\n    toggleModal = (modalType) => {\r\n        let modals = this.clone(this.state.modals)\r\n        modals[modalType] = !modals[modalType]\r\n        this.setState({ modals: modals })\r\n    }\r\n\r\n    deductStars = (stars) => {\r\n        let stats = this.clone(this.state.stats)\r\n        stats.starsUsed += stars\r\n        this.setState({ stats: stats })\r\n    }\r\n\r\n    saveKitty = (kitty) => {\r\n        let inventory = this.clone(this.state.inventory)\r\n        inventory.catGifs = [...inventory.catGifs, kitty]\r\n        this.setState({ inventory: inventory })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            tasks,\r\n            inventory,\r\n            settings,\r\n            stats,\r\n            tags,\r\n            buttonDisabled,\r\n            selectedPriority,\r\n            selectedDate,\r\n            selectedTag,\r\n            selectedSort,\r\n            selectedStyle,\r\n            modals\r\n        } = this.state\r\n        const {\r\n            convertDate,\r\n            articulateDateDue\r\n        } = this.props\r\n        document.body.style.backgroundColor = settings.style.backgroundColor\r\n        return (\r\n            <Container>\r\n                <Notifications />\r\n                <Row>\r\n                    <Col className='todo' sm='10' md='7' lg='5' xl='5'>\r\n                        <AddTask\r\n                            tasks={tasks}\r\n                            addItem={this.addItem}\r\n                            inputChange={this.inputChange}\r\n                            convertPriority={this.convertPriority}\r\n                            convertDate={convertDate}\r\n                            buttonDisabled={buttonDisabled}\r\n                            selectedPriority={selectedPriority}\r\n                            selectedDate={selectedDate}\r\n                            selectedTag={selectedTag} />\r\n                        <Row className='row-1 no-gutters'>\r\n                            <Col>\r\n                                <div className='calendar'>\r\n                                    <Calendar\r\n                                        value={selectedDate}\r\n                                        handleOnChange={this.changeDate}\r\n                                        convertDate={convertDate} />\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <div className='priority--top'>\r\n                                    <Priority\r\n                                        value={selectedPriority}\r\n                                        handleOnChange={this.changePriority} />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='row-2 no-gutters'>\r\n                            <Col\r\n                                className='sort padding-right'\r\n                                xs='5'>\r\n                                <Input\r\n                                    type='select'\r\n                                    className='select-sort'\r\n                                    value={selectedSort}\r\n                                    innerRef={this.selectSortBy}\r\n                                    onChange={this.sortItems}\r\n                                >\r\n                                    <option value='None'>Sort: None</option>\r\n                                    <option value='Priority'>Priority</option>\r\n                                    <option value='Date Due'>Date Due</option>\r\n                                    <option value='A-Z'>A-Z</option>\r\n                                    <option value='Tags'>Tags</option>\r\n                                    <option value='Selected Tag'>Selected Tag</option>\r\n                                </Input>\r\n                            </Col>\r\n                            <Col\r\n                                className='manage-tags'\r\n                                xs='7'\r\n                            >\r\n                                <Tags\r\n                                    tags={tags}\r\n                                    selectedTag={selectedTag}\r\n                                    changeTag={this.changeTag}\r\n                                    addTag={this.addTag}\r\n                                    removeTag={this.removeTag}\r\n                                    showButtons\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <List className='list'>\r\n                            <TransitionGroup>\r\n                                {tasks.map((task, index) =>\r\n                                    (task.hidden) ?\r\n                                        null :\r\n                                        (!task.active && settings.hideInactive) ?\r\n                                            null :\r\n                                            <CSSTransition\r\n                                                key={task.id}\r\n                                                timeout={500}\r\n                                                classNames='fade'\r\n                                            >\r\n                                                <Task\r\n                                                    tasks={tasks}\r\n                                                    settings={settings}\r\n                                                    task={task}\r\n                                                    index={index}\r\n                                                    handleTextChange={this.handleTextChange}\r\n                                                    editText={this.editText}\r\n                                                    toggleEditItem={this.toggleEditItem}\r\n                                                    articulateDateDue={articulateDateDue}\r\n                                                    markComplete={this.markComplete}\r\n                                                    sortItems={this.sortItems}\r\n                                                    convertPriority={this.convertPriority}\r\n                                                    editDate={this.editDate}\r\n                                                    convertDate={convertDate}\r\n                                                    editPriority={this.editPriority}\r\n                                                    tags={tags}\r\n                                                    editTaskTag={this.editTaskTag}\r\n                                                    addTag={this.addTag}\r\n                                                    removeTag={this.removeTag}\r\n                                                />\r\n                                            </CSSTransition>\r\n                                )}\r\n                            </TransitionGroup>\r\n                        </List>\r\n                        <Row className='row-3 no-gutters'>\r\n                            <Button\r\n                                className='settings-button'\r\n                                outline\r\n                                color='secondary'\r\n                                onClick={() => this.toggleModal('settingsModal')}\r\n                            >\r\n                                {\"⚙\"}\r\n                            </Button>\r\n                            <Button\r\n                                className='stats-button'\r\n                                outline\r\n                                color='secondary'\r\n                                onClick={() => this.toggleModal('statsModal')}\r\n                            >\r\n                                {\"⭐\"}\r\n                            </Button>\r\n                            <Button\r\n                                className='cat-button'\r\n                                outline\r\n                                color='secondary'\r\n                                onClick={() => this.toggleModal('shopModal')}\r\n                            >\r\n                                {\"🐱\"}\r\n                            </Button>\r\n                        </Row>\r\n                        <Row className='settings no-gutters'>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <CustomModal\r\n                    isOpen={modals.settingsModal}\r\n                    modalType='settingsModal'\r\n                    header=\"Settings\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Settings\r\n                        settings={settings}\r\n                        selectedStyle={selectedStyle}\r\n                        changeStyle={this.changeStyle}\r\n                        changeColor={this.changeColor}\r\n                        toggleInactiveTasks={this.toggleInactiveTasks}\r\n                    />\r\n                </CustomModal>\r\n                <CustomModal\r\n                    className='rainbow-background'\r\n                    isOpen={modals.statsModal}\r\n                    modalType='statsModal'\r\n                    header=\"Stats\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Stats\r\n                        stats={stats}\r\n                    />\r\n                </CustomModal>\r\n                <CustomModal\r\n                    isOpen={modals.shopModal}\r\n                    modalType='shopModal'\r\n                    header=\"Le Catte Gif Shoppe\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Shop\r\n                        stats={stats}\r\n                        inventory={inventory}\r\n                        saveKitty={this.saveKitty}\r\n                        deductStars={this.deductStars}\r\n                    />\r\n                </CustomModal>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nToDo.defaultProps = {\r\n    convertDate: convertDate,\r\n    getDate: getDate,\r\n    articulateDateDue: articulateDateDue,\r\n    arrayMove: arrayMove\r\n}\r\n\r\nexport default ToDo","import React, { Component } from 'react';\nimport { convertDate, articulateDateDue, arrayMove } from './functions'\nimport ToDo from './ToDo'\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        const tasks = localStorage.getItem('tasks')\n        const inventory = localStorage.getItem('inventory_3')\n        const settings = localStorage.getItem('settings')\n        const stats = localStorage.getItem('stats_5')\n        const tags = localStorage.getItem('tags_2')\n        const saveData = (data, fileName) => localStorage.setItem(fileName, JSON.stringify(data))\n        return (\n            <ToDo\n                tasks={tasks}\n                inventory={inventory}\n                settings={settings}\n                stats={stats}\n                tags={tags}\n                saveData={saveData}\n                convertDate={convertDate}\n                articulateDateDue={articulateDateDue}\n                arrayMove={arrayMove}\n            />\n        )\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}