{"version":3,"sources":["functions.js","randomMessage.js","thenBy.min.js","ToDo.js","App.js","serviceWorker.js","index.js"],"names":["convertDate","date","convertTo","ISODate","Date","toISOString","substring","getTime","year","month","day","setUTCFullYear","setUTCMonth","setUTCDate","toLocaleDateString","articulateDateDue","dateDue","today","now","arrayMove","arr","fromIndex","toIndex","arrCopy","slice","element","length","splice","randomMessage","messages","Math","floor","random","firstBy","identity","v","ignoreCase","toLowerCase","tb","func","opt","x","this","y","f","direction","prop","v1","uf","preprocess","cmp","v2","makeCompareFunction","a","b","thenBy","Calendar","_ref","handleOnChange","value","react_default","createElement","Fragment","reactstrap_es","className","onChange","type","min","max","Priority","_ref2","List","props","children","Task","_ref3","settings","task","index","toggleEditItem","handleTextChange","editText","active","onClick","style","backgroundColor","priority","colorLow","colorMedium","colorHigh","textDecorationLine","editPanelHidden","text","instance","concat","xs","lib_default","event","stopPropagation","defaultValue","color","size","TaskDetails","_ref4","react_transition_group","tag","in","timeout","classNames","ItemButtons","_ref5","markComplete","sortItems","outline","ItemEditBox","_ref6","hidden","Settings","_ref7","selectedStyle","changeStyle","changeColor","toggleInactiveTasks","_this","id","label","checked","hideInactive","ListItem","ToDo_Task","ToDo_TaskDetails","key","ToDo_ItemButtons","ToDo_ItemEditBox","ToDo_Calendar","editDate","ToDo_Priority","convertPriority","editPriority","Stats","_ref8","stats","tasksCompleted","totalTasksCompleted","Object","keys","oneWeekAgo","totalTasksCompletedOneWeek","reduce","total","timeCompleted","bonusStars","starsUsed","CustomModal","isOpen","modalType","header","toggleModal","toggle","CatGif","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loading","_this3","axios","defaults","headers","common","get","then","response","gif","data","console","log","url","setState","_this$state","react_spinners","sizeUnit","width","src","alt","Component","Shop","_this4","buyGif","stars","showGif","buttonDisabled","deductStars","_this5","totalStars","offset","disabled","ToDo_CatGif","AddTask","_this6","createItem","_this6$props","tasks","selectedPriority","addItem","selectedDate","selectedTag","inputElementValue","inputElement","current","itemInstances","uuid","timeCreated","settingsHidden","preventDefault","React","createRef","_this$props","inputChange","onSubmit","innerRef","placeholder","ToDo","_this7","clone","object","JSON","parse","stringify","newItem","selectedSort","toConsumableArray","sortItemsBy","undo","setTimeout","notify","notifyStyle","background","deleteItem","err","filter","item","changePriority","target","newDate","toggleItems","tasksCopy","forEach","moveFrom","showAll","moveTo","sort","manual","selectSortBy","targetTask","targetPanelState","editTaskText","changeDate","updateDate","selectedColor","styles","changeTag","addTag","tags","newTag","prompt","includes","alert","removeTag","currentText","hideEditPanels","modals","time","font","settingsModal","statsModal","shopModal","createShowQueue","Default","Marie","Halloween","prevProps","prevState","_this$state2","saveData","prevTasksCompleted","revisedStats","_this8","_this$state3","_this$props2","document","body","notify_default","sm","md","lg","xl","ToDo_AddTask","map","ToDo_List","ToDo_ListItem","ToDo_CustomModal","ToDo_Settings","ToDo_Stats","ToDo_Shop","defaultProps","App","localStorage","getItem","src_ToDo","fileName","setItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c4d9686.chunk.js","sourcesContent":["const convertDate = (date, convertTo) => {\r\n    const ISODate = new Date(date).toISOString().substring(0, 10)\r\n    if (convertTo === \"ISO\") {\r\n        return ISODate\r\n    } else if (convertTo === \"timestamp\") {\r\n        return new Date(date).getTime()\r\n    } else if (convertTo === \"local\") {\r\n        const year = ISODate.substring(0, 4)\r\n        const month = ISODate.substring(5, 7)\r\n        const day = ISODate.substring(8, 10)\r\n        const date = new Date()\r\n        date.setUTCFullYear(year)\r\n        date.setUTCMonth(month - 1)\r\n        date.setUTCDate(day)\r\n        return date.toLocaleDateString(\"en-GB\")\r\n    }\r\n}\r\n\r\nconst articulateDateDue = (dateDue) => {\r\n    let today = convertDate(Date.now(), \"ISO\")\r\n    today = convertDate(today, \"timestamp\")\r\n    if (dateDue - today < 0) {\r\n        return \"Overdue\"\r\n    }\r\n    if (dateDue - today === 0) {\r\n        return \"Today\"\r\n    } else if (dateDue - today === 86400000) {\r\n        return \"Tomorrow\"\r\n    } else {\r\n        return convertDate(dateDue, \"local\")\r\n    }\r\n}\r\n\r\nconst arrayMove = (arr, fromIndex, toIndex) => {\r\n    const arrCopy = arr.slice(0)\r\n    const element = arr[fromIndex]\r\n    if (fromIndex === 0) {\r\n        toIndex = arr.length\r\n    }\r\n    arrCopy.splice(fromIndex, 1)\r\n    arrCopy.splice(toIndex, 0, element)\r\n    return arrCopy\r\n}\r\n\r\nexport { convertDate, articulateDateDue, arrayMove }","const randomMessage = () => {\r\n    const messages = [\r\n        \"Great job! 👍\",\r\n        \"Nice! 👌\",\r\n        \"You're doing so great!\",\r\n        \"You're on a roll!\",\r\n        \"We're doing it! 😁\",\r\n        \"Weow! 😺\",\r\n        \"A++ for effort!✨\",\r\n        \"Cool 😎\",\r\n        \"Amazing! 😄\",\r\n        \"Impressive 😎\",\r\n        \"Incredible! 👏\",\r\n        \"Nice moves! 🕺\",\r\n        \"Making progress! 😊\"\r\n    ]\r\n    return messages[Math.floor(Math.random() * messages.length)]\r\n}\r\n\r\nexport { randomMessage }","/***\r\n   Copyright 2013 Teun Duynstee\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n     http://www.apache.org/licenses/LICENSE-2.0\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\nvar firstBy = (function() {\r\n\r\n    function identity(v){return v;}\r\n\r\n    function ignoreCase(v){return typeof(v)===\"string\" ? v.toLowerCase() : v;}\r\n\r\n    function makeCompareFunction(f, opt){\r\n        opt = typeof(opt)===\"number\" ? {direction:opt} : opt||{};\r\n        if(typeof(f)!=\"function\"){\r\n            var prop = f;\r\n            // make unary function\r\n            f = function(v1){return !!v1[prop] ? v1[prop] : \"\";}\r\n        }\r\n        if(f.length === 1) {\r\n            // f is a unary function mapping a single item to its sort score\r\n            var uf = f;\r\n            var preprocess = opt.ignoreCase?ignoreCase:identity;\r\n            var cmp = opt.cmp || function(v1,v2) {return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;}\r\n            f = function(v1,v2) {return cmp(preprocess(uf(v1)), preprocess(uf(v2)));}\r\n        }\r\n        if(opt.direction === -1) return function(v1,v2){return -f(v1,v2)};\r\n        return f;\r\n    }\r\n\r\n    /* adds a secondary compare function to the target function (`this` context)\r\n       which is applied in case the first one returns 0 (equal)\r\n       returns a new compare function, which has a `thenBy` method as well */\r\n    function tb(func, opt) {\r\n        /* should get value false for the first call. This can be done by calling the \r\n        exported function, or the firstBy property on it (for es6 module compatibility)\r\n        */\r\n        var x = (typeof(this) == \"function\" && !this.firstBy) ? this : false;\r\n        var y = makeCompareFunction(func, opt);\r\n        var f = x ? function(a, b) {\r\n                        return x(a,b) || y(a,b);\r\n                    }\r\n                  : y;\r\n        f.thenBy = tb;\r\n        return f;\r\n    }\r\n    tb.firstBy = tb;\r\n    return tb;\r\n})();\r\n\r\nexport { firstBy }","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { Container, Row, Col, Input, CustomInput, Button, Form, FormGroup, Modal, ModalHeader, ModalBody, ModalFooter, Badge } from 'reactstrap'\r\nimport { ClipLoader } from 'react-spinners'\r\nimport Notifications, { notify } from 'react-notify-toast'\r\nimport TextareaAutosize from 'react-autosize-textarea'\r\nimport uuid from 'uuid'\r\nimport { convertDate, articulateDateDue, arrayMove } from './functions'\r\nimport { randomMessage } from './randomMessage'\r\nimport { firstBy } from './thenBy.min.js'\r\n\r\nconst Calendar = ({ handleOnChange, value, convertDate }) =>\r\n    <React.Fragment>\r\n        <Input\r\n            className=\"calendar-element\"\r\n            onChange={handleOnChange}\r\n            type=\"date\"\r\n            value={value}\r\n            min={convertDate(Date.now(), \"ISO\")}\r\n            max=\"2019-12-31\"\r\n        />\r\n    </React.Fragment>\r\n\r\nconst Priority = ({ handleOnChange, value }) =>\r\n    <React.Fragment>\r\n        <Input\r\n            type=\"select\"\r\n            className=\"priority-element\"\r\n            value={value}\r\n            onChange={handleOnChange}\r\n        >\r\n            <option value=\"Low\">Priority: Low</option>\r\n            <option value=\"Medium\">Medium</option>\r\n            <option value=\"High\">High</option>\r\n        </Input>\r\n    </React.Fragment>\r\n\r\nconst List = (props) =>\r\n    <div className=\"list\">\r\n        {props.children}\r\n    </div>\r\n\r\nconst Task = ({ settings, task, index, toggleEditItem, handleTextChange, editText, children }) =>\r\n    <div\r\n        className={(task.active) ? \"task\" : \"task animate-background\"}\r\n        onClick={() => toggleEditItem(index)}\r\n        style={{\r\n            backgroundColor:\r\n                (!task.active) ?\r\n                    \"#e5e5e5\" :\r\n                    (task.priority === 3) ?\r\n                        settings.style.colorLow :\r\n                        (task.priority === 2) ?\r\n                            settings.style.colorMedium :\r\n                            settings.style.colorHigh\r\n        }}>\r\n        <span\r\n            style={{\r\n                textDecorationLine:\r\n                    (task.active) ?\r\n                        \"none\" :\r\n                        \"line-through\"\r\n            }}>\r\n            {(task.editPanelHidden) ?\r\n                <Row>\r\n                    <Col>\r\n                        {task.text}\r\n                        <span className=\"instance\">\r\n                            {(task.instance > 1) ?\r\n                                ` (${task.instance})` :\r\n                                null}\r\n                        </span>\r\n                    </Col>\r\n                </Row> :\r\n                <span>\r\n                    <Row className=\"edit-text no-gutters\">\r\n                        <Col xs=\"10\">\r\n                            <TextareaAutosize\r\n                                className=\"edit-text-element\"\r\n                                onChange={(event) => handleTextChange(event)}\r\n                                onClick={(event) => event.stopPropagation()}\r\n                                defaultValue={task.text}\r\n                            />\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <Button\r\n                                className=\"edit-text-button\"\r\n                                color=\"secondary\"\r\n                                size=\"sm\"\r\n                                onClick={(event) => editText(event, index)}\r\n                            >\r\n                                {\"OK\"}\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </span>\r\n            }\r\n        </span>\r\n        {children}\r\n    </div>\r\n\r\nconst TaskDetails = ({ task, articulateDateDue }) =>\r\n    <Row>\r\n        <Col className=\"task-details\">\r\n            <TransitionGroup>\r\n                <div className=\"date-due x-small\">\r\n                    {(task.tag === null) ?\r\n                        null :\r\n                        <span className=\"tag\">{task.tag}</span>}\r\n                    {(task.active) ?\r\n                        `Due: ${articulateDateDue(task.dateDue)}` :\r\n                        <React.Fragment>\r\n                            <span className=\"x-small\">\r\n                                {\"Complete \"}\r\n                            </span>\r\n                            <CSSTransition\r\n                                in={!task.active}\r\n                                timeout={1000}\r\n                                classNames=\"star\"\r\n                            //unmountOnExit\r\n                            >\r\n                                <span className=\"star x-small\" >\r\n                                    {\"★\"}\r\n                                </span>\r\n                            </CSSTransition>\r\n                            <CSSTransition\r\n                                in={!task.active}\r\n                                timeout={1000}\r\n                                classNames=\"plus-one\"\r\n                            //unmountOnExit\r\n                            >\r\n                                <span className=\"plus-one x-small\">\r\n                                    {\" +1\"}\r\n                                </span>\r\n                            </CSSTransition>\r\n                        </React.Fragment>}\r\n                </div>\r\n            </TransitionGroup>\r\n        </Col>\r\n    </Row>\r\n\r\nconst ItemButtons = ({ task, index, markComplete, sortItems }) =>\r\n    <div className=\"item-buttons\">\r\n        <Button\r\n            className=\"sort-button\"\r\n            size=\"sm\"\r\n            outline\r\n            color=\"secondary\"\r\n            onClick={() => sortItems(index, true)}>\r\n            ↑\r\n        </Button>\r\n        <Button\r\n            className=\"delete-item-button\"\r\n            size=\"sm\"\r\n            outline\r\n            color={(task.active) ? \"success\" : \"danger\"}\r\n            onClick={() => markComplete(index)}>\r\n            {(task.active) ? \"✓\" : \"✕\"}\r\n        </Button>\r\n    </div>\r\n\r\nconst ItemEditBox = ({ task, index, markComplete, children }) =>\r\n    <div className=\"edit-task\" hidden={task.editPanelHidden}>\r\n        <span hidden={!task.active}>\r\n            {children}\r\n        </span>\r\n        <div className=\"undo\">\r\n            <Button\r\n                hidden={task.active}\r\n                className=\"undo-button\"\r\n                outline\r\n                color=\"secondary\"\r\n                onClick={() => markComplete(index, true)}>\r\n                Undo \"Mark Complete\"\r\n            </Button>\r\n        </div>\r\n    </div>\r\n\r\nconst Settings = ({ settings, selectedStyle, changeStyle, changeColor, toggleInactiveTasks }) =>\r\n    <React.Fragment>\r\n        <fieldset>\r\n            <div>\r\n                <legend>Choose your colours</legend>\r\n                <div>\r\n                    <Input\r\n                        className=\"select-style\"\r\n                        type=\"select\"\r\n                        value={selectedStyle}\r\n                        onChange={changeStyle}>\r\n                        <option value=\"None\">None</option>\r\n                        <option value=\"Default\">Default</option>\r\n                        <option value=\"Marie\">Marie</option>\r\n                        <option value=\"Halloween\">Halloween</option>\r\n                    </Input>\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        className=\"change-color\"\r\n                        type=\"color\"\r\n                        value={settings.style.colorHigh}\r\n                        onChange={(event) => changeColor(event, \"colorHigh\")}>\r\n                    </input>\r\n                    <label>High Priority</label>\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        className=\"change-color\"\r\n                        type=\"color\"\r\n                        value={settings.style.colorMedium}\r\n                        onChange={(event) => changeColor(event, \"colorMedium\")}>\r\n                    </input>\r\n                    <label>Medium Priority</label>\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        className=\"change-color\"\r\n                        type=\"color\"\r\n                        value={settings.style.colorLow}\r\n                        onChange={(event) => this.changeColor(event, \"colorLow\")}>\r\n                    </input>\r\n                    <label>Low Priority</label>\r\n                </div>\r\n            </div>\r\n            <React.Fragment>\r\n                <div>-----------</div>\r\n                <Row>\r\n                    <Col>\r\n                        <CustomInput\r\n                            type=\"checkbox\"\r\n                            id=\"checkbox\"\r\n                            label=\"Show completed tasks\"\r\n                            checked={!settings.hideInactive}\r\n                            onChange={toggleInactiveTasks} />\r\n                    </Col>\r\n                </Row>\r\n                <div>-----------</div>\r\n            </React.Fragment>\r\n        </fieldset>\r\n    </React.Fragment>\r\n\r\nconst ListItem = (props) =>\r\n    <React.Fragment>\r\n        <Row className=\"no-gutters\">\r\n            <Col xs=\"9\">\r\n                <Task\r\n                    settings={props.settings}\r\n                    task={props.task}\r\n                    index={props.index}\r\n                    handleTextChange={props.handleTextChange}\r\n                    editText={props.editText}\r\n                    toggleEditItem={props.toggleEditItem}\r\n                >\r\n                    <TaskDetails\r\n                        task={props.task}\r\n                        articulateDateDue={props.articulateDateDue}\r\n                    />\r\n                </Task>\r\n            </Col>\r\n            <Col xs=\"3\">\r\n                <TransitionGroup>\r\n                    <CSSTransition\r\n                        key={props.task.id}\r\n                        timeout={500}\r\n                        classNames=\"fade\">\r\n                        <ItemButtons\r\n                            task={props.task}\r\n                            index={props.index}\r\n                            markComplete={props.markComplete}\r\n                            sortItems={props.sortItems}\r\n                        />\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n            </Col>\r\n        </Row>\r\n        <ItemEditBox\r\n            task={props.task}\r\n            index={props.index}\r\n            markComplete={props.markComplete}>\r\n            <Row>\r\n                <Col>\r\n                    <Calendar\r\n                        value={props.convertDate(props.task.dateDue, \"ISO\")}\r\n                        handleOnChange={(event) => props.editDate(event, props.index)}\r\n                        convertDate={props.convertDate}\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <Priority\r\n                        value={props.convertPriority(props.task.priority)}\r\n                        handleOnChange={(event) => props.editPriority(event, props.index)}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </ItemEditBox>\r\n    </React.Fragment>\r\n\r\nconst Stats = ({ stats }) => {\r\n    const tasksCompleted = stats.tasksCompleted\r\n    const totalTasksCompleted = Object.keys(tasksCompleted).length\r\n    const oneWeekAgo = Date.now() - (60 * 60 * 24 * 7 * 1000)\r\n    const totalTasksCompletedOneWeek =\r\n        Object.keys(tasksCompleted)\r\n            .reduce((total, id) => {\r\n                if (tasksCompleted[id].timeCompleted > oneWeekAgo) {\r\n                    total++\r\n                }\r\n                return total\r\n            }, 0)\r\n    return (\r\n        <div className=\"align-center\">\r\n            <div className=\"star-big\">\r\n                {\"★\"}\r\n            </div>\r\n            <h1>{`${totalTasksCompleted + stats.bonusStars - stats.starsUsed} stars earned!`}</h1>\r\n            <div>\r\n                {`Tasks completed: ${totalTasksCompleted}`}\r\n            </div>\r\n            <div>\r\n                {`This week: ${totalTasksCompletedOneWeek}`}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CustomModal = (props) => {\r\n    const { isOpen, modalType, header, toggleModal } = props\r\n    return (\r\n        <Modal isOpen={isOpen} toggle={() => toggleModal(modalType)}>\r\n            <ModalHeader toggle={() => toggleModal(modalType)}>\r\n                {header}\r\n            </ModalHeader>\r\n            <ModalBody>\r\n                {props.children}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={() => toggleModal(modalType)}>OK</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nclass CatGif extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.defaults.headers.common[\"x-api-key\"] = \"f5568fae-d85b-4310-8e88-cb282e0e2bac\"\r\n        axios.get(\"https://api.thecatapi.com/v1/images/search?limit=1&mime_types=gif&format=json&order=RANDOM\")\r\n            .then(response => {\r\n                const gif = response.data\r\n                console.log(gif[0].url)\r\n                this.setState({ \r\n                    loading: false,\r\n                    gif \r\n                })\r\n            })\r\n    }\r\n    render() {\r\n        const { loading, gif } = this.state\r\n        return (\r\n            (loading) ?\r\n                <div className=\"align-center\">\r\n                    <ClipLoader\r\n                        color=\"#007bff\"\r\n                        sizeUnit=\"px\"\r\n                        size={50}\r\n                        loading={loading}\r\n                    />\r\n                </div>\r\n                :\r\n                <div className=\"align-center\">\r\n                    <img style={{ width: \"280px\" }} src={gif[0].url} alt=\"This should be a cat gif...\" />\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Shop extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            showGif: false,\r\n            buttonDisabled: false\r\n        }\r\n    }\r\n    buyGif = (stars) => {\r\n        this.setState({\r\n            showGif: true,\r\n            buttonDisabled: true\r\n        })\r\n        this.props.deductStars(stars)\r\n    }\r\n    render() {\r\n        const { stats } = this.props\r\n        const { buttonDisabled } = this.state\r\n        const totalStars = Object.keys(stats.tasksCompleted).length + stats.bonusStars - stats.starsUsed\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col xs={{ offset: 8 }}>\r\n                        <Button color=\"primary\" outline>\r\n                            {\"Stars \"}<Badge color=\"primary\">{totalStars}</Badge>\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"margin-top-10\">\r\n                    <Col xs={{ size: 10, offset: 1 }}>\r\n                        <span className=\"shop-items\">\r\n                            {\"1 x Cat Gif: \"}\r\n                        </span>\r\n                    <Button\r\n                        className=\"buy-button\"\r\n                        color=\"warning\"\r\n                        disabled={buttonDisabled && totalStars > 0}\r\n                        onClick={() => this.buyGif(2)}\r\n                    >\r\n                        {\"2⭐\"}\r\n                    </Button>\r\n                    </Col>\r\n                </Row>\r\n                <div className=\"cat-gif\">\r\n                    {(!this.state.showGif) ? null :\r\n                        <CatGif />}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nclass AddTask extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputElement = React.createRef()\r\n    }\r\n    createItem = (event) => {\r\n        const { tasks, selectedPriority, addItem, convertPriority, convertDate, selectedDate, selectedTag } = this.props\r\n        const inputElementValue = this.inputElement.current.value\r\n        const itemInstances = tasks.reduce(function (total, task) {\r\n            return total + (inputElementValue === task.text ? 1 : 0)\r\n        }, 1)\r\n        const newItem = {\r\n            active: true,\r\n            id: uuid().substring(0, 12),\r\n            hidden: false,\r\n            text: inputElementValue,\r\n            priority: convertPriority(selectedPriority),\r\n            timeCreated: Date.now(),\r\n            dateDue: convertDate(selectedDate, \"timestamp\"),\r\n            instance: itemInstances,\r\n            editPanelHidden: true,\r\n            settingsHidden: true,\r\n            tag: (selectedTag === \"None\") ? null : selectedTag,\r\n        }\r\n        addItem(newItem)\r\n        this.inputElement.current.value = \"\"\r\n        event.preventDefault()\r\n    }\r\n\r\n    render() {\r\n        const { inputChange, buttonDisabled } = this.props\r\n        return (\r\n            <Form onSubmit={this.createItem}>\r\n                <FormGroup>\r\n                    <Row className=\"row-0 no-gutters\">\r\n                        <Col className=\"padding-right\" xs=\"9\">\r\n                            <Input\r\n                                type=\"text\"\r\n                                className=\"input--add-task\"\r\n                                onChange={inputChange}\r\n                                innerRef={this.inputElement}\r\n                                placeholder=\"Enter Task\">\r\n                            </Input>\r\n                        </Col>\r\n                        <Col xs=\"3\">\r\n                            <Button\r\n                                className=\"add-button\"\r\n                                outline\r\n                                color=\"primary\"\r\n                                disabled={buttonDisabled}\r\n                                type=\"submit\">\r\n                                {\"Add\"}\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nclass ToDo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            tasks: (this.props.tasks) ? JSON.parse(this.props.tasks) :\r\n                [{\r\n                    active: true,\r\n                    hidden: false,\r\n                    id: uuid().substring(0, 10),\r\n                    text: \"Sample Task ✨\",\r\n                    priority: 3,\r\n                    time: Date.now(),\r\n                    instance: 1,\r\n                    editPanelHidden: true,\r\n                    dateDue: convertDate(convertDate(Date.now(), \"ISO\"), \"timestamp\"),\r\n                    tag: null\r\n                }],\r\n            settings: (this.props.settings) ? JSON.parse(this.props.settings) :\r\n                {\r\n                    style: {\r\n                        colorHigh: \"#f5c6cb\",\r\n                        colorMedium: \"#ffeeba\",\r\n                        colorLow: \"#bee5eb\",\r\n                        backgroundColor: \"#ffffff\",\r\n                        font: \"\"\r\n                    },\r\n                    hideInactive: false\r\n                },\r\n            stats: (this.props.stats) ? JSON.parse(this.props.stats) :\r\n                {\r\n                    tasksCompleted: {},\r\n                    bonusStars: 0,\r\n                    starsUsed: 0,\r\n                },\r\n            modals: {\r\n                    settingsModal: false,\r\n                    statsModal: false,\r\n                    shopModal: false\r\n                },\r\n            tags: (this.props.tags) ? JSON.parse(this.props.tags) : [\"None\"],\r\n            buttonDisabled: true,\r\n            selectedPriority: \"Low\",\r\n            selectedSort: \"None\",\r\n            selectedDate: this.props.convertDate(Date.now(), \"ISO\"),\r\n            selectedStyle: \"None\",\r\n            selectedTag: \"None\",\r\n            editTaskText: \"\",\r\n        }\r\n        this.selectSortBy = React.createRef()\r\n        this.notify = notify.createShowQueue()\r\n        this.styles = {\r\n            Default: [\"#bee5eb\", \"#ffeeba\", \"#f5c6cb\", \"#ffffff\"],\r\n            Marie: [\"#fce8f7\", \"#f2b5e2\", \"#f46ed0\", \"#ffffff\"],\r\n            Halloween: [\"#feeeb8\", \"#ffa100\", \"#e76427\", \"#000000\"]\r\n        }\r\n        this.notifyStyle = { background: \"#007bff\", text: \"#ffffff\" }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { tasks, settings, stats, tags } = this.state\r\n        const { saveData } = this.props\r\n        if (prevState.tasks !== tasks) {\r\n            saveData(tasks, \"tasks\")\r\n        }\r\n        if (prevState.settings !== settings) {\r\n            saveData(settings, \"settings\")\r\n        }\r\n        if (prevState.stats !== stats) {\r\n            saveData(stats, \"stats_5\")\r\n        }\r\n        if (prevState.tags !== tags) {\r\n            saveData(tags, \"tags\")\r\n        }\r\n        // Uncredit bonus stars on \"mark uncomplete\"\r\n        const prevTasksCompleted = Object.keys(prevState.stats.tasksCompleted).length\r\n        const tasksCompleted = Object.keys(stats.tasksCompleted).length\r\n        if (tasksCompleted < prevTasksCompleted) {\r\n            if (prevTasksCompleted % 10 === 0) {\r\n                let revisedStats = this.clone(stats)\r\n                revisedStats.bonusStars -= 2\r\n                console.log(\"Stars are being removed..\")\r\n                this.setState({\r\n                    stats: revisedStats\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.hideEditPanels()\r\n        this.sortItems()\r\n        console.log(this.state)\r\n        this.notify(\"You got this! 😊\", \"custom\", 2000, this.notifyStyle)\r\n    }\r\n\r\n    clone = (object) => {\r\n        return JSON.parse(JSON.stringify(object))\r\n    }\r\n\r\n    addItem = (newItem) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks = [...tasks, newItem]\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({\r\n            tasks: tasks,\r\n            buttonDisabled: true\r\n        })\r\n    }\r\n\r\n    markComplete = (index, undo) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        let stats = this.clone(this.state.stats)\r\n        const task = tasks[index]\r\n        if (tasks.length === 0) {\r\n            console.log(\"List is empty\")\r\n        } else {\r\n            try {\r\n                const itemIsActive = task.active\r\n                if (itemIsActive) {\r\n                    task.active = false\r\n                    stats.tasksCompleted[task.id] = {\r\n                        timeCreated: task.timeCreated,\r\n                        timeCompleted: Date.now()\r\n                    }\r\n                    this.setState({\r\n                        tasks: tasks,\r\n                        stats: stats\r\n                    })\r\n                    const tasksCompleted = Object.keys(stats.tasksCompleted).length\r\n                    if (tasksCompleted % 5 === 0) {\r\n                        setTimeout(() => {\r\n                            this.notify(randomMessage(), \"custom\", 2000, this.notifyStyle)\r\n                        }, 500)\r\n                    }\r\n                    if (tasksCompleted % 10 === 0) {\r\n                        setTimeout(() => {\r\n                            this.notify(\"⭐+2 STARS BONUS⭐\", \"custom\", 2000, { background: \"#fff5be\", text: \"#000000\" })\r\n                            stats.bonusStars += 2\r\n                            this.setState({\r\n                                stats: stats\r\n                            })\r\n                        }, 500)\r\n                    }\r\n                } else if (undo) {\r\n                    task.editPanelHidden = true\r\n                    task.active = true\r\n                    delete stats.tasksCompleted[task.id]\r\n                    this.setState({\r\n                        tasks: tasks,\r\n                        stats: stats\r\n                    })\r\n                } else {\r\n                    this.deleteItem(index)\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteItem = (key) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks = tasks.filter((item, index) =>\r\n            index !== key\r\n        )\r\n        this.setState({\r\n            tasks: tasks\r\n        })\r\n    }\r\n\r\n    changePriority = (event) => {\r\n        const selectedPriority = event.target.value\r\n        this.setState({ selectedPriority: selectedPriority })\r\n    }\r\n\r\n    convertPriority = (priority) => {\r\n        if (typeof priority === 'string') {\r\n            return (priority === \"Low\") ? 3\r\n                : (priority === \"Medium\") ? 2\r\n                    : 1\r\n        } else {\r\n            return (priority === 3) ? \"Low\"\r\n                : (priority === 2) ? \"Medium\"\r\n                    : \"High\"\r\n        }\r\n    }\r\n\r\n    editPriority = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const task = tasks[index]\r\n        const selectedPriority = event.target.value\r\n        task.priority = this.convertPriority(selectedPriority)\r\n        task.editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({\r\n            tasks: tasks\r\n        })\r\n    }\r\n\r\n    editDate = (event, index) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const newDate = event.target.value\r\n        tasks[index].dateDue = convertDate(newDate, \"timestamp\")\r\n        tasks[index].editPanelHidden = true\r\n        tasks = this.sortItemsBy(tasks, selectedSort)\r\n        this.setState({\r\n            tasks: tasks\r\n        })\r\n    }\r\n\r\n    inputChange = (event) => {\r\n        const currentText = event.target.value\r\n        if (currentText === \"\") {\r\n            this.setState({\r\n                buttonDisabled: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                buttonDisabled: false\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleItems = (tasks, type, tag) => {\r\n        let tasksCopy = this.clone(tasks)\r\n        if (type === \"selected tag\") {\r\n            tasksCopy.forEach(task => (task.tag !== tag) && (task.hidden = true))\r\n        } else if (type === \"tags only\") {\r\n            tasksCopy.forEach(task => (task.tag === null) && (task.hidden = true))\r\n        } else if (type === \"show all\") {\r\n            tasksCopy.forEach(task => (task.hidden === true) && (task.hidden = false))\r\n        }\r\n        return tasksCopy\r\n    }\r\n\r\n    sortItemsBy = (tasks, selectedSort, moveFrom) => {\r\n        const showAll = this.toggleItems(tasks, \"show all\")\r\n        if (selectedSort === \"Manual\") {\r\n            const moveTo = moveFrom - 1\r\n            return tasks = this.props.arrayMove(tasks, moveFrom, moveTo)\r\n            //return tasks.sort(firstBy(\"active\", -1))\r\n        }\r\n        if (selectedSort === \"None\") {\r\n            return showAll\r\n        } else if (selectedSort === \"Priority\") {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy(\"active\", -1)\r\n                    .thenBy(\"priority\")\r\n                    .thenBy(\"dateDue\")\r\n                    .thenBy(\"task\")\r\n            )\r\n        } else if (selectedSort === \"Date Due\") {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy(\"active\", -1)\r\n                    .thenBy(\"dateDue\")\r\n                    .thenBy(\"priority\")\r\n                    .thenBy(\"task\")\r\n            )\r\n        } else if (selectedSort === \"A-Z\") {\r\n            tasks = showAll\r\n            return tasks.sort(\r\n                firstBy(\"active\", -1)\r\n                    .thenBy(\"task\")\r\n            )\r\n        } else if (selectedSort === \"Tags\") {\r\n            tasks = showAll\r\n            tasks = this.toggleItems(tasks, \"tags only\")\r\n            return tasks.sort(\r\n                firstBy(\"tag\")\r\n                    .thenBy(\"priority\")\r\n                    .thenBy(\"dateDue\")\r\n                    .thenBy(\"task\")\r\n            )\r\n        } else if (selectedSort === \"Selected Tag\") {\r\n            tasks = this.toggleItems(tasks, \"selected tag\", this.state.selectedTag)\r\n            return tasks.sort(\r\n                firstBy(\"tag\")\r\n                    .thenBy(\"priority\")\r\n                    .thenBy(\"dateDue\")\r\n                    .thenBy(\"task\")\r\n            )\r\n        } else if (selectedSort === \"toggle inactive\") {\r\n            return tasks.sort(firstBy(\"active\", -1))\r\n        }\r\n    }\r\n\r\n    sortItems = (index, manual) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        const selectedSort = this.selectSortBy.current.value\r\n        if (manual) {\r\n            if (selectedSort === \"None\") {\r\n                tasks = this.sortItemsBy(tasks, \"Manual\", index)\r\n                this.setState({\r\n                    tasks: tasks\r\n                })\r\n            } else {\r\n                tasks = this.sortItemsBy(tasks, \"Manual\", index)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: \"None\"\r\n                })\r\n            }\r\n        } else {\r\n            if (selectedSort === \"None\") {\r\n                tasks = this.sortItemsBy(tasks, selectedSort)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: selectedSort\r\n                })\r\n            } else {\r\n                tasks = this.sortItemsBy(tasks, selectedSort)\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedSort: selectedSort\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleEditItem = (index) => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        const targetTask = tasks[index]\r\n        const targetPanelState = targetTask.editPanelHidden\r\n        tasks.forEach((task) => {\r\n            if (task.editPanelHidden === false && task !== targetTask) {\r\n                task.editPanelHidden = true\r\n            }\r\n        })\r\n        tasks[index].editPanelHidden = !targetPanelState\r\n        this.setState({\r\n            tasks: tasks,\r\n            editTaskText: targetTask.text\r\n        })\r\n    }\r\n\r\n    changeDate = (event) => {\r\n        const updateDate = event.target.value\r\n        this.setState({\r\n            selectedDate: updateDate\r\n        })\r\n    }\r\n\r\n    changeColor = (event, selectedColor) => {\r\n        let settings = this.clone(this.state.settings)\r\n        settings.style[selectedColor] = event.target.value\r\n        this.setState({\r\n            settings: settings,\r\n            selectedStyle: \"None\"\r\n        })\r\n    }\r\n\r\n    changeStyle = (event) => {\r\n        let settings = this.clone(this.state.settings)\r\n        const selectedStyle = event.target.value\r\n        const style = settings.style\r\n        if (style === \"None\") {\r\n            this.setState({\r\n                selectedStyle: selectedStyle\r\n            })\r\n        } else {\r\n            style.colorLow = this.styles[selectedStyle][0]\r\n            style.colorMedium = this.styles[selectedStyle][1]\r\n            style.colorHigh = this.styles[selectedStyle][2]\r\n            style.backgroundColor = this.styles[selectedStyle][3]\r\n            this.setState({\r\n                settings: settings,\r\n                selectedStyle: selectedStyle\r\n            })\r\n        }\r\n    }\r\n\r\n    changeTag = (event) => {\r\n        const { selectedSort } = this.state\r\n        let tasks = this.clone(this.state.tasks)\r\n        const tag = event.target.value\r\n        if (selectedSort === \"Selected Tag\") {\r\n            this.toggleItems(tasks, \"show all\")\r\n            this.toggleItems(tasks, \"selected tag\", tag)\r\n            this.setState({\r\n                tasks: tasks,\r\n                selectedTag: tag\r\n            })\r\n        } else {\r\n            this.setState({\r\n                selectedTag: tag\r\n            })\r\n        }\r\n    }\r\n\r\n    addTag = () => {\r\n        let tags = this.clone(this.state.tags)\r\n        const newTag = prompt(\"Enter a new tag\")\r\n        if (newTag === \"\" || tags.includes(newTag)) {\r\n            alert(\"Invalid tag or duplicate\")\r\n        } else {\r\n            tags = [...tags, newTag]\r\n            this.setState({\r\n                tags: tags,\r\n                selectedTag: newTag\r\n            })\r\n        }\r\n    }\r\n\r\n    removeTag = () => {\r\n        const { selectedTag } = this.state\r\n        let tags = this.clone(this.state.tags)\r\n        tags = tags.filter(tag => tag !== selectedTag || tag === \"None\")\r\n        this.setState({\r\n            tags: tags,\r\n            selectedTag: \"None\"\r\n        })\r\n    }\r\n\r\n    editText = (event, index) => {\r\n        event.stopPropagation()\r\n        let tasks = this.clone(this.state.tasks)\r\n        tasks[index].text = this.state.editTaskText\r\n        tasks[index].editPanelHidden = true\r\n        this.setState({\r\n            tasks: tasks\r\n        })\r\n    }\r\n\r\n    handleTextChange = (event) => {\r\n        const currentText = event.target.value\r\n        this.setState({\r\n            editTaskText: currentText\r\n        })\r\n    }\r\n\r\n    hideEditPanels = () => {\r\n        const { tasks } = this.state\r\n        tasks.forEach(task => (task.editPanelHidden === false) && (task.editPanelHidden = true))\r\n    }\r\n\r\n    toggleInactiveTasks = () => {\r\n        let tasks = this.clone(this.state.tasks)\r\n        let settings = this.clone(this.state.settings)\r\n        settings.hideInactive = !settings.hideInactive\r\n        tasks = this.sortItemsBy(tasks, \"toggle inactive\")\r\n        this.setState({\r\n            tasks: tasks,\r\n            settings: settings\r\n        })\r\n    }\r\n\r\n    toggleModal = (modalType) => {\r\n        let modals = this.clone(this.state.modals)\r\n        modals[modalType] = !modals[modalType]\r\n        this.setState({\r\n            modals: modals\r\n        })\r\n    }\r\n\r\n    deductStars = (stars) => {\r\n        let stats = this.clone(this.state.stats)\r\n        stats.starsUsed += stars\r\n        this.setState({\r\n            stats: stats\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            tasks, \r\n            settings, \r\n            stats, \r\n            tags, \r\n            buttonDisabled, \r\n            selectedPriority,\r\n            selectedDate, \r\n            selectedTag, \r\n            selectedSort, \r\n            selectedStyle, \r\n            modals\r\n        } = this.state\r\n        const { \r\n            convertDate, \r\n            articulateDateDue \r\n        } = this.props\r\n        document.body.style.backgroundColor = settings.style.backgroundColor\r\n        return (\r\n            <Container>\r\n                <Notifications />\r\n                <Row>\r\n                    <Col className=\"todo\" sm=\"10\" md=\"7\" lg=\"5\" xl=\"5\">\r\n                        <AddTask\r\n                            tasks={tasks}\r\n                            addItem={this.addItem}\r\n                            inputChange={this.inputChange}\r\n                            convertPriority={this.convertPriority}\r\n                            convertDate={convertDate}\r\n                            buttonDisabled={buttonDisabled}\r\n                            selectedPriority={selectedPriority}\r\n                            selectedDate={selectedDate}\r\n                            selectedTag={selectedTag} />\r\n                        <Row className=\"row-1 no-gutters\">\r\n                            <Col>\r\n                                <div className=\"calendar\">\r\n                                    <Calendar\r\n                                        value={selectedDate}\r\n                                        handleOnChange={this.changeDate}\r\n                                        convertDate={convertDate} />\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <div className=\"priority--top\">\r\n                                    <Priority\r\n                                        value={selectedPriority}\r\n                                        handleOnChange={this.changePriority} />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"row-2 no-gutters\">\r\n                            <Col\r\n                                className=\"sort padding-right\"\r\n                                xs=\"5\">\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    className=\"select-sort\"\r\n                                    value={selectedSort}\r\n                                    innerRef={this.selectSortBy}\r\n                                    onChange={this.sortItems}>\r\n                                    <option value=\"None\">Sort: None</option>\r\n                                    <option value=\"Priority\">Priority</option>\r\n                                    <option value=\"Date Due\">Date Due</option>\r\n                                    <option value=\"A-Z\">A-Z</option>\r\n                                    <option value=\"Tags\">Tags</option>\r\n                                    <option value=\"Selected Tag\">Selected Tag</option>\r\n                                </Input>\r\n                            </Col>\r\n                            <Col\r\n                                className=\"manage-tags\"\r\n                                xs=\"7\">\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    className=\"select-tag\"\r\n                                    value={selectedTag}\r\n                                    onChange={this.changeTag}>\r\n                                    {tags.map((tag, index) =>\r\n                                        <option\r\n                                            key={index}\r\n                                            value={tag}>\r\n                                            {(tag === \"None\") ? \"Tag: None\" : tag}\r\n                                        </option>\r\n                                    )}\r\n                                </Input>\r\n                                <Button\r\n                                    outline\r\n                                    color=\"secondary\"\r\n                                    size=\"sm\"\r\n                                    onClick={this.removeTag}>\r\n                                    -\r\n                                </Button>\r\n                                <Button\r\n                                    outline\r\n                                    color=\"secondary\"\r\n                                    size=\"sm\"\r\n                                    onClick={this.addTag}>\r\n                                    +\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <List className=\"list\">\r\n                            <TransitionGroup>\r\n                                {tasks.map((task, index) =>\r\n                                    (task.hidden) ?\r\n                                        null :\r\n                                        (!task.active && settings.hideInactive) ?\r\n                                            null :\r\n                                            <CSSTransition\r\n                                                key={task.id}\r\n                                                timeout={500}\r\n                                                classNames=\"fade\">\r\n                                                <ListItem\r\n                                                    tasks={tasks}\r\n                                                    settings={settings}\r\n                                                    task={task}\r\n                                                    index={index}\r\n                                                    handleTextChange={this.handleTextChange}\r\n                                                    editText={this.editText}\r\n                                                    toggleEditItem={this.toggleEditItem}\r\n                                                    articulateDateDue={articulateDateDue}\r\n                                                    markComplete={this.markComplete}\r\n                                                    sortItems={this.sortItems}\r\n                                                    convertPriority={this.convertPriority}\r\n                                                    editDate={this.editDate}\r\n                                                    convertDate={convertDate}\r\n                                                    editPriority={this.editPriority} />\r\n                                            </CSSTransition>\r\n                                )}\r\n                            </TransitionGroup>\r\n                        </List>\r\n                        <Row className=\"row-3 no-gutters\">\r\n                            <Button\r\n                                className=\"settings-button\"\r\n                                outline\r\n                                color=\"secondary\"\r\n                                onClick={() => this.toggleModal(\"settingsModal\")}\r\n                            >\r\n                                {\"⚙\"}\r\n                            </Button>\r\n                            <Button\r\n                                className=\"stats-button\"\r\n                                outline\r\n                                color=\"secondary\"\r\n                                onClick={() => this.toggleModal(\"statsModal\")}\r\n                            >\r\n                                {\"⭐\"}\r\n                            </Button>\r\n                            <Button\r\n                                className=\"cat-button\"\r\n                                outline\r\n                                color=\"secondary\"\r\n                                onClick={() => this.toggleModal(\"shopModal\")}\r\n                            >\r\n                                {\"🐱\"}\r\n                            </Button>\r\n                        </Row>\r\n                        <Row className=\"settings no-gutters\">\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <CustomModal\r\n                    isOpen={modals.settingsModal}\r\n                    modalType=\"settingsModal\"\r\n                    header=\"Settings\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Settings\r\n                        settings={settings}\r\n                        selectedStyle={selectedStyle}\r\n                        changeStyle={this.changeStyle}\r\n                        changeColor={this.changeColor}\r\n                        toggleInactiveTasks={this.toggleInactiveTasks}\r\n                    />\r\n                </CustomModal>\r\n                <CustomModal\r\n                    isOpen={modals.statsModal}\r\n                    modalType=\"statsModal\"\r\n                    header=\"Stats\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <Stats\r\n                        stats={stats}\r\n                    />\r\n                </CustomModal>\r\n                <CustomModal\r\n                    isOpen={modals.shopModal}\r\n                    modalType=\"shopModal\"\r\n                    header=\"Cat Gif Shop!\"\r\n                    toggleModal={this.toggleModal}\r\n                >\r\n                    <div className=\"align-center\">\r\n                        <Shop \r\n                            stats={stats}\r\n                            deductStars={this.deductStars}\r\n                        />\r\n                    </div>\r\n                </CustomModal>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nToDo.defaultProps = {\r\n    convertDate: convertDate,\r\n    articulateDateDue: articulateDateDue,\r\n    arrayMove: arrayMove\r\n}\r\n\r\nexport default ToDo","import React, { Component } from 'react';\nimport { convertDate, articulateDateDue, arrayMove } from './functions'\nimport ToDo from './ToDo'\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        const tasks = localStorage.getItem(\"tasks\")\n        const settings = localStorage.getItem(\"settings\")\n        const stats = localStorage.getItem(\"stats_5\")\n        const tags = localStorage.getItem(\"tags\")\n        const saveData = (data, fileName) => localStorage.setItem(fileName, JSON.stringify(data))\n        return (\n            <ToDo\n                tasks={tasks}\n                settings={settings}\n                stats={stats}\n                tags={tags}\n                saveData={saveData}\n                convertDate={convertDate}\n                articulateDateDue={articulateDateDue}\n                arrayMove={arrayMove}\n            />\n        )\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}